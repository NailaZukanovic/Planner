{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\ForecastTiles.jsx\";\nimport React, { Component } from \"react\";\nimport DetailedInfo from \"./DetailedInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ForecastTiles extends Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n\n    this._groupByDays = data => {\n      return data.reduce((list, item) => {\n        const forecastDate = item.dt_txt.substr(0, 10);\n        list[forecastDate] = list[forecastDate] || [];\n        list[forecastDate].push(item);\n        return list;\n      }, {});\n    };\n\n    this._getDayInfo = data => {\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\n    };\n\n    this._getIcon = data => `https://openweathermap.org/img/w/${data[0].weather[0].icon}.png`;\n\n    this._getInfo = function (data) {\n      let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      let humidity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      data.map(item => {\n        max.push(item.main.temp_max);\n        min.push(item.main.temp_min);\n        humidity.push(item.main.humidity);\n      });\n      const minMax = {\n        min: Math.round(Math.min(...min)),\n        max: Math.round(Math.max(...max))\n      }; // Gets the day's average humdity\n\n      const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"min-max\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: `${minMax.max}°C`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, _this), \" / \", `${minMax.min}°C`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"more-info\",\n          children: `Avg. Humidity: ${avgHumdity}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, _this);\n    };\n\n    this._showMoreInfo = index => {\n      const elm = this.refs[`div-${index}`];\n      const expandedElment = document.querySelector(\".expanded\");\n      elm.classList.add(\"expanded\");\n      expandedElment !== null && expandedElment.classList.remove(\"expanded\");\n    };\n  }\n\n  render() {\n    const {\n      forecasts\n    } = this.props;\n    const tiles = Object.values(this._groupByDays(forecasts)); // Edge case:\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\n    // this ensures that we are showing only 5-days of forecast.\n\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-tiles\",\n      children: forecastTiles.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `forecast-tile tile-${i}`,\n        ref: `div-${i}`,\n        onClick: () => {\n          this._showMoreInfo(i);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"primary-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this._getIcon(item)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this), this._getDayInfo(item)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), this._getInfo(item)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"detailed-info\",\n          children: /*#__PURE__*/_jsxDEV(DetailedInfo, {\n            data: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/ForecastTiles.jsx"],"names":["React","Component","DetailedInfo","ForecastTiles","_groupByDays","data","reduce","list","item","forecastDate","dt_txt","substr","push","_getDayInfo","daysOfWeek","Date","dt","getDay","_getIcon","weather","icon","_getInfo","min","max","humidity","map","main","temp_max","temp_min","minMax","Math","round","avgHumdity","curr","next","length","_showMoreInfo","index","elm","refs","expandedElment","document","querySelector","classList","add","remove","render","forecasts","props","tiles","Object","values","forecastTiles","slice","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport DetailedInfo from \"./DetailedInfo\";\r\n\r\nexport default class ForecastTiles extends Component {\r\n\r\n  // Filters the data by date and returns an Object containing a list of 5-day forecast.\r\n  _groupByDays = data => {\r\n    return (data.reduce((list, item) => {\r\n      const forecastDate = item.dt_txt.substr(0,10);\r\n      list[forecastDate] = list[forecastDate] || [];\r\n      list[forecastDate].push(item);\r\n\r\n      return list;\r\n    }, {}));\r\n  };\r\n\r\n  // Returns week of the day\r\n  _getDayInfo = data => {\r\n    const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n    return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n  };\r\n\r\n  // Fetches the icon using the icon code available in the forecast data.\r\n  _getIcon = data => `https://openweathermap.org/img/w/${data[0].weather[0].icon}.png`;\r\n\r\n  // Gets the Minimum, Maximum and Avg Humidity temperatures of the day.\r\n  _getInfo = (data, min=[], max=[], humidity=[]) => {\r\n    data.map(item => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n      humidity.push(item.main.humidity);\r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n\r\n    // Gets the day's average humdity\r\n    const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\r\n\r\n    return (\r\n      <div className=\"weather-info\">\r\n        <div className=\"min-max\">\r\n          <strong>{`${minMax.max}°C`}</strong> / {`${minMax.min}°C`}\r\n        </div>\r\n        <div className=\"more-info\">\r\n          {`Avg. Humidity: ${avgHumdity}%`}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Toggles accordion to display hourly weather information\r\n  _showMoreInfo = (index) => {\r\n    const elm = this.refs[`div-${index}`];\r\n    const expandedElment = document.querySelector(\".expanded\");\r\n\r\n    elm.classList.add(\"expanded\");\r\n    expandedElment !== null && expandedElment.classList.remove(\"expanded\");\r\n  }\r\n\r\n  render() {\r\n\r\n    const { forecasts } = this.props;\r\n    const tiles = Object.values(this._groupByDays(forecasts));\r\n\r\n    // Edge case:\r\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\r\n    // this ensures that we are showing only 5-days of forecast.\r\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\r\n\r\n    return (\r\n      <div className=\"forecast-tiles\">\r\n        {forecastTiles.map((item, i) => (\r\n          <div\r\n            className={`forecast-tile tile-${i}`}\r\n            key={i}\r\n            ref={`div-${i}`}\r\n            onClick={() => {this._showMoreInfo(i)}}\r\n          >\r\n            <div className=\"primary-info\">\r\n              <div className=\"icon\">\r\n                <img src={this._getIcon(item)} />\r\n                {this._getDayInfo(item)}\r\n              </div>\r\n              {this._getInfo(item)}\r\n            </div>\r\n            <div className=\"detailed-info\" key={i}>\r\n              <DetailedInfo data={item} />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
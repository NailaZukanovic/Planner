{"ast":null,"code":"import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context, // TODO: this is unsafe, but we're removing it in v5 anyway\n  _stateInfo) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {}, undefined, {\n        parent: _this,\n        key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration)\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, currentState.context, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, _event) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var actions = this.getActions(stateTransition, context, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, context, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = context !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/node_modules/xstate/es/StateNode.js"],"names":["__assign","__spreadArray","__read","__values","__rest","STATE_DELIMITER","IS_PRODUCTION","isFunction","mapValues","isArray","flatten","keys","toArray","toStateValue","isString","getEventType","toSCXMLEvent","matchesState","path","evaluateGuard","mapContext","pathToStateValue","isBuiltInEvent","partition","updateHistoryValue","toStatePath","mapFilterValues","warn","toStatePaths","nestedPath","normalizeTarget","toGuard","toTransitionConfigArray","isMachine","createInvokeId","SpecialTargets","getAllStateNodes","getConfiguration","isInFinalState","getTagsFromConfiguration","has","getChildren","getValue","isLeafNode","start","start$1","stop","stop$1","invoke","update","nullEvent","raise","raise$1","send","send$1","done","toActionObjects","resolveActions","doneInvoke","error","toActionObject","toActivityDefinition","after","cancel","initEvent","State","stateValuesEqual","createInvocableActor","toInvokeDefinition","NULL_EVENT","STATE_IDENTIFIER","WILDCARD","EMPTY_OBJECT","isStateId","str","createDefaultOptions","actions","guards","services","activities","delays","validateArrayifiedTransitions","stateNode","event","transitions","hasNonLastUnguardedTarget","slice","some","transition","target","eventText","concat","id","StateNode","config","options","_context","_stateInfo","_this","context","undefined","_a","order","__xstatenode","__cache","events","relativeValue","Map","initialStateValue","initialState","on","candidates","delayedTransitions","idMap","tags","Object","assign","parent","key","machine","delimiter","join","version","type","parallel","states","length","history","schema","description","initial","stateConfig","dfs","e_1","_b","_c","next","child","value","e_1_1","return","call","_transient","always","Array","strict","onEntry","entry","map","action","onExit","exit","meta","doneData","data","invokeConfig","i","invokeId","src","invokeSource","activity","bind","prototype","_init","forEach","withConfig","withContext","defineProperty","get","enumerable","configurable","state","definition","toJSON","reduce","eventType","push","getDelayedTransitions","formatTransitions","getCandidates","eventName","transient","filter","sameEventType","afterConfig","mutateEntryExit","delay","delayRef","configTransition","resolvedTransition","resolvedDelay","isNaN","delayedTransition","formatTransition","getStateNodes","stateValue","getStateNode","subStateKeys","subStateNodes","apply","subStateKey","handles","includes","resolveState","configuration","from","resolve","transitionLeafNode","_event","transitionCompoundNode","_transition","transitionParallelNode","e_2","transitionMap","subStateValue","subStateNode","e_2_1","stateTransitions","enabledTransitions","st","willTransition","entryNodes","t","entrySet","exitSet","source","getTransitionData","e_3","name","nextStateNodes","selectedTransition","candidate","cond","stateIn","in","resolvedContext","isInState","matches","getStateNodeById","guardPassed","err","Error","message","e_3_1","allNextStateNodes","getRelativeStateNodes","historyValue","isInternal","internal","reentryNodes","n","nodesFromChild","childStateNode","escapes","nodes","marker","getActions","currentContext","prevState","e_4","e_5","prevConfig","resolvedConfig","resolvedConfig_1","resolvedConfig_1_1","sn","e_4_1","prevConfig_1","prevConfig_1_1","e_5_1","doneEvents","grandparent","every","parentNode","sort","a","b","entryStates","Set","exitStates","entryActions","exitActions","currentState","resolvedStateValue","getResolvedPath","stateTransition","resolveTransition","resolveRaisedTransition","originalEvent","currentActions","unshift","e_6","actions_1","actions_1_1","e_6_1","preserveActionOrder","resolvedActions","updatedContext","to","Internal","raisedEvents","nonRaisedActions","invokeActions","children","acc","resolvedConfiguration","isDone","nextState","_sessionid","didUpdateContext","changed","isTransient","maybeNextState","raisedEvent","shift","stateKey","result","stateId","resolvedStateId","getStateNodeByPath","statePath","e","arrayStatePath","currentStateNode","stateIdentifier","getInitialState","historyConfig","relativeStateId","resolveHistory","initialStateNodes","initialStateNodePaths","initialPath","getFromRelativePath","relativePath","childStatePath","relativeStateValue","current","historyTarget","relativeChildPath","subHistoryValue","subStatePath","childStateIds","stateIds","e_7","e_8","ownEvents","_d","_e","_f","event_1","add","e_8_1","e_7_1","resolveTarget","_target","isInternalTarget","resolvedTarget","targetStateNode","transitionConfig","normalizedTarget","e_9","onConfig","wildcardConfigs","strictTransitionConfigs_1","transitionConfigArray","eventlessConfig","doneConfig","onDone","String","invokeDef","settleTransitions","onError","formattedTransitions","delayedTransitions_1","delayedTransitions_1_1","e_9_1"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray, __read, __values, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { isFunction, mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, toSCXMLEvent, matchesState, path, evaluateGuard, mapContext, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, createInvokeId } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, isInFinalState, getTagsFromConfiguration, has, getChildren, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nimport { toInvokeDefinition } from './invokeUtils.js';\n\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\".concat(event, \"'\");\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  _context, // TODO: this is unsafe, but we're removing it in v5 anyway\n  _stateInfo) {\n    var _this = this;\n\n    if (_context === void 0) {\n      _context = 'context' in config ? config.context : undefined;\n    }\n\n    var _a;\n\n    this.config = config;\n    this._context = _context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.tags = [];\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n    this.description = this.config.description;\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {}, undefined, {\n        parent: _this,\n        key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on);\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.doneData = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        var invokeId = createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n        return toInvokeDefinition({\n          src: invokeId,\n          id: invokeId\n        });\n      } else if (isString(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        return toInvokeDefinition(__assign(__assign({}, invokeConfig), {\n          id: invokeId,\n          src: invokeConfig.src\n        }));\n      } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {\n        var invokeId = invokeConfig.id || createInvokeId(_this.id, i);\n        _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n        return toInvokeDefinition(__assign(__assign({\n          id: invokeId\n        }, invokeConfig), {\n          src: invokeId\n        }));\n      } else {\n        var invokeSource = invokeConfig.src;\n        return toInvokeDefinition(__assign(__assign({\n          id: createInvokeId(_this.id, i)\n        }, invokeConfig), {\n          src: invokeSource\n        }));\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n    this.tags = toArray(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context !== null && context !== void 0 ? context : this.context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"context\", {\n    get: function () {\n      return isFunction(this._context) ? this._context() : this._context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.doneData,\n        invoke: this.invoke,\n        description: this.description,\n        tags: this.tags\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = [this];\n    subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n    }))), false));\n    return subStateNodes;\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration,\n      done: isInFinalState(configuration, this),\n      tags: getTagsFromConfiguration(configuration)\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.getTransitionData = function (state, event) {\n    return this._transition(state.value, state, toSCXMLEvent(event));\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.doneData ? mapContext(sn.doneData, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.activities.map(function (activity) {\n        return start(activity);\n      })), false), __read(stateNode.onEntry), false);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function (activity) {\n        return stop(activity);\n      })), false);\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);\n    return this.resolveTransition(stateTransition, currentState, currentState.context, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n    // TODO: this should be the raised event! Delete in V5 (breaking)\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions), false));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, _event) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var actions = this.getActions(stateTransition, context, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.id || action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.id || action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, context, _event, actions, this.machine.config.preserveActionOrder), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      var _a;\n\n      return action.type === start$1 && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity, _this.machine, updatedContext, _event);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone,\n      tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,\n      machine: this\n    });\n    var didUpdateContext = context !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    } // There are transient transitions if the machine is not in a final state\n    // and if some of the state nodes have transient (\"always\") transitions.\n\n\n    var isTransient = !isDone && (this._transient || configuration.some(function (stateNode) {\n      return stateNode._transient;\n    })); // If there are no enabled transitions, check if there are transient transitions.\n    // If there are transient transitions, continue checking for more transitions\n    // because an transient transition should be triggered even if there are no\n    // enabled transitions.\n    //\n    // If we're already working on an transient transition (by checking\n    // if the event is a NULL_EVENT), then stop to prevent an infinite loop.\n    //\n    // Otherwise, if there are no enabled nor transient transitions, we are done.\n\n    if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.history = history;\n    maybeNextState.tags = getTagsFromConfiguration(maybeNextState.configuration);\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      } else {\n        // The finite state value of a machine without child states is just an empty object\n        initialStateValue = {};\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init(); // TODO: this should be in the constructor (see note in constructor)\n\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\".concat(event_1));\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event,\n      toJSON: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\".concat(t.id);\n          }) : undefined,\n          source: \"#\".concat(_this.id)\n        });\n      }\n    });\n\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictTransitionConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictTransitionConfigs_1).map(function (key) {\n        if (!IS_PRODUCTION && key === NULL_EVENT) {\n          warn(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + \"Please check the `on` configuration for \\\"#\".concat(_this.id, \"\\\".\"));\n        }\n\n        var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, transitionConfigArray);\n        }\n\n        return transitionConfigArray;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var eventlessConfig = this.config.always ? toTransitionConfigArray('', this.config.always) : [];\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n\n    if (!IS_PRODUCTION) {\n      warn(!(this.config.onDone && !this.parent), \"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id, \"\\\".\"));\n    }\n\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)), false));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };\n"]},"metadata":{},"sourceType":"module"}
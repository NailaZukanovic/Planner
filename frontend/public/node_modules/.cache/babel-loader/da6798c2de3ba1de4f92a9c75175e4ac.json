{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\Game.jsx\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport 'Game.css';\nimport PlayAgain from './PlayAgain';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Game extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      images: [],\n      image: \"\",\n      item: \"\",\n      gamePlayed: false,\n      gameCount: 0\n    };\n\n    this.getGameImage = () => {\n      const spaceSearch = [\"moon\", \"earth\", \"jupiter\", \"saturn\", \"pluto\", \"mars\", \"venus\"];\n      let randomSearchItem = spaceSearch[Math.floor(Math.random() * spaceSearch.length)];\n      let oneHundred = [];\n\n      for (let i = 0; i <= 100; i++) {\n        oneHundred.push(i);\n      }\n\n      let randomNumber = oneHundred[Math.floor(Math.random() * oneHundred.length)];\n      const url = \"https://images-api.nasa.gov/search?q=\"; // sending the call to the NASA API\n\n      $.ajax({\n        url: url + randomSearchItem,\n        type: \"GET\",\n        dataType: \"json\"\n      }).done(function (json) {\n        let imageres = json.collection.items[randomNumber].links[0].href;\n      }).then(json => {\n        this.setState({\n          image: json.collection.items[randomNumber].links[0].href,\n          item: randomSearchItem\n        });\n      });\n    };\n\n    this.playGame = () => {\n      const spaceWords = [\"moon\", \"earth\", \"jupiter\", \"saturn\", \"pluto\", \"mars\", \"venus\"];\n      return spaceWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guessing\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => this.guessChoice(e),\n          id: word,\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this));\n    };\n\n    this.guessChoice = e => {\n      this.setState({\n        gamePlayed: true,\n        guess: e.target.id\n      });\n\n      if (this.state.item === e.target.id) {\n        $(\".namegamebutton\").html(\"You're Right!\");\n      } else {\n        $(\".namegamebutton\").html(\"Wrong, Try Again. Correct Answer: \" + this.state.item);\n      }\n    };\n\n    this.playAgain = () => {\n      this.setState({\n        gamePlayed: false\n      });\n    };\n\n    this.renderGame = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"namegamebutton\",\n        children: this.playGame()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }, this);\n    };\n  }\n\n  //ajax request after the component mounts\n  componentDidMount() {\n    this.getGameImage();\n    this.setState({\n      gameCount: this.state.gameCount++\n    });\n  } //Renders the game image, the choices, and determines if the game is done and can be played again\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"namegame\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titlegame\",\n        children: \"Guess which one is associated with this image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.state.image,\n        id: \"namegameimage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), this.renderGame(), this.state.gamePlayed ? /*#__PURE__*/_jsxDEV(PlayAgain, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/Game.jsx"],"names":["React","Component","$","PlayAgain","Game","state","images","image","item","gamePlayed","gameCount","getGameImage","spaceSearch","randomSearchItem","Math","floor","random","length","oneHundred","i","push","randomNumber","url","ajax","type","dataType","done","json","imageres","collection","items","links","href","then","setState","playGame","spaceWords","map","word","e","guessChoice","guess","target","id","html","playAgain","renderGame","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\nimport 'Game.css';\r\nimport PlayAgain from './PlayAgain';\r\n\r\nexport default class Game extends Component {\r\n\r\n//state tracks the current image from the api, the item trhe player guessed, attempts played, and whether the game has been played once\r\n  state = {\r\n    images: [],\r\n    image: \"\",\r\n    item: \"\",\r\n    gamePlayed: false,\r\n    gameCount: 0\r\n  }\r\n\r\n//ajax request to get the image for the game\r\n  getGameImage = () => {\r\n    const spaceSearch = [\"moon\", \"earth\", \"jupiter\", \"saturn\", \"pluto\", \"mars\", \"venus\"]\r\n    let randomSearchItem = spaceSearch[Math.floor(Math.random()*spaceSearch.length)];\r\n    let oneHundred = [];\r\n    for (let i = 0; i <= 100; i++) {\r\n       oneHundred.push(i);\r\n    }\r\n    let randomNumber = oneHundred[Math.floor(Math.random()*oneHundred.length)]\r\n\r\n    const url = \"https://images-api.nasa.gov/search?q=\"\r\n\r\n    // sending the call to the NASA API\r\n        $.ajax({\r\n          url: url + randomSearchItem,\r\n          type: \"GET\",\r\n          dataType : \"json\",\r\n        }).done(function(json){\r\n          let imageres = json.collection.items[randomNumber].links[0].href\r\n        }).then(json => {\r\n          this.setState({\r\n            image: json.collection.items[randomNumber].links[0].href,\r\n            item: randomSearchItem\r\n           })\r\n        })\r\n\r\n  }\r\n\r\n//the game choices are rendered\r\n  playGame = () => {\r\n    const spaceWords = [\"moon\", \"earth\", \"jupiter\", \"saturn\", \"pluto\", \"mars\", \"venus\"]\r\n      return spaceWords.map(word =>\r\n        <div className=\"guessing\">\r\n          <button onClick={ e => this.guessChoice(e)} id={word}>{word}</button>\r\n        </div>\r\n      )\r\n  }\r\n\r\n//the player chooses one item and this function determines if it's a win\r\n  guessChoice = (e) => {\r\n\r\n    this.setState({\r\n      gamePlayed: true,\r\n      guess: e.target.id\r\n    })\r\n\r\n    if (this.state.item === e.target.id) {\r\n      $(\".namegamebutton\").html(\"You're Right!\")\r\n\r\n    } else {\r\n      $(\".namegamebutton\").html(\"Wrong, Try Again. Correct Answer: \" + this.state.item)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  playAgain = () => {\r\n    this.setState({\r\n      gamePlayed: false\r\n    })\r\n  }\r\n\r\n  renderGame = () => {\r\n    return <div className=\"namegamebutton\">{this.playGame()}</div>\r\n  }\r\n\r\n\r\n//ajax request after the component mounts\r\n  componentDidMount(){\r\n    this.getGameImage()\r\n    this.setState({gameCount: this.state.gameCount++})\r\n  }\r\n\r\n\r\n//Renders the game image, the choices, and determines if the game is done and can be played again\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"namegame\" >\r\n\r\n        <div className=\"titlegame\">Guess which one is associated with this image:</div>\r\n        <img src={this.state.image} id=\"namegameimage\" />\r\n        {this.renderGame()}\r\n        {this.state.gamePlayed ? <PlayAgain /> : null}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
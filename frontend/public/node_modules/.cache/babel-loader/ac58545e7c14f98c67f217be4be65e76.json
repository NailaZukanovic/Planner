{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport { Presence as t } from \"@radix-ui/react-presence\";\nimport { Primitive as o } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as r } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as n } from \"@radix-ui/react-use-layout-effect\";\nimport { useControllableState as i } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport { composeEventHandlers as l } from \"@radix-ui/primitive\";\nimport * as s from \"react\";\nimport p from \"@babel/runtime/helpers/esm/extends\";\nconst [d, c] = a(\"Collapsible\");\nexport { c as createCollapsibleScope };\nconst [m, u] = d(\"Collapsible\");\nexport const Collapsible = /*#__PURE__*/s.forwardRef((t, r) => {\n  const {\n    __scopeCollapsible: n,\n    open: a,\n    defaultOpen: l,\n    disabled: d,\n    onOpenChange: c,\n    ...u\n  } = t,\n        [f = !1, C] = i({\n    prop: a,\n    defaultProp: l,\n    onChange: c\n  });\n  /*#__PURE__*/\n\n  return s.createElement(m, {\n    scope: n,\n    disabled: d,\n    contentId: e(),\n    open: f,\n    onOpenToggle: s.useCallback(() => C(e => !e), [C])\n  }, /*#__PURE__*/s.createElement(o.div, p({\n    \"data-state\": b(f),\n    \"data-disabled\": d ? \"\" : void 0\n  }, u, {\n    ref: r\n  })));\n});\n/*#__PURE__*/\n\nexport const CollapsibleTrigger = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n    __scopeCollapsible: r,\n    ...n\n  } = e,\n        i = u(\"CollapsibleTrigger\", r);\n  /*#__PURE__*/\n\n  return s.createElement(o.button, p({\n    \"aria-controls\": i.contentId,\n    \"aria-expanded\": i.open || !1,\n    \"data-state\": b(i.open),\n    \"data-disabled\": i.disabled ? \"\" : void 0,\n    disabled: i.disabled\n  }, n, {\n    ref: t,\n    onClick: l(e.onClick, i.onOpenToggle)\n  }));\n});\n/*#__PURE__*/\n\nexport const CollapsibleContent = /*#__PURE__*/s.forwardRef((e, o) => {\n  const {\n    forceMount: r,\n    ...n\n  } = e,\n        i = u(\"CollapsibleContent\", e.__scopeCollapsible);\n  /*#__PURE__*/\n\n  return s.createElement(t, {\n    present: r || i.open\n  }, _ref => {\n    let {\n      present: e\n    } = _ref;\n    return /*#__PURE__*/s.createElement(f, p({}, n, {\n      ref: o,\n      present: e\n    }));\n  });\n});\n/*#__PURE__*/\n\nconst f = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n    __scopeCollapsible: i,\n    present: a,\n    children: l,\n    ...d\n  } = e,\n        c = u(\"CollapsibleContent\", i),\n        [m, f] = s.useState(a),\n        C = s.useRef(null),\n        x = r(t, C),\n        g = s.useRef(0),\n        h = g.current,\n        v = s.useRef(0),\n        y = v.current,\n        R = c.open || m;\n  return n(() => {\n    const e = C.current;\n\n    if (e) {\n      const t = e.style.transition,\n            o = e.style.animation;\n      e.style.transition = \"none\", e.style.animation = \"none\";\n      const r = e.getBoundingClientRect();\n      g.current = r.height, v.current = r.width, e.style.transition = t, e.style.animation = o, f(a);\n    }\n  }, [c.open, a]), /*#__PURE__*/s.createElement(o.div, p({\n    \"data-state\": b(c.open),\n    \"data-disabled\": c.disabled ? \"\" : void 0,\n    id: c.contentId,\n    hidden: !R\n  }, d, {\n    ref: x,\n    style: {\n      \"--radix-collapsible-content-height\": h ? `${h}px` : void 0,\n      \"--radix-collapsible-content-width\": y ? `${y}px` : void 0,\n      ...e.style\n    }\n  }), R && l);\n});\n\nfunction b(e) {\n  return e ? \"open\" : \"closed\";\n}\n\nexport const Root = Collapsible;\nexport const Trigger = CollapsibleTrigger;\nexport const Content = CollapsibleContent;","map":{"version":3,"sources":["packages/react/collapsible/src/Collapsible.tsx"],"names":["createCollapsibleContext","createCollapsibleScope","createContextScope","CollapsibleProvider","useCollapsibleContext","Collapsible","React","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","useControllableState","prop","defaultProp","onChange","_react","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleProvider","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","Primitive","div","getState","undefined","ref","CollapsibleTrigger","triggerProps","context","button","onClick","composeEventHandlers","CollapsibleContent","forceMount","contentProps","Presence","present","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleContentImpl","CollapsibleContentImpl","children","isPresent","setIsPresent","useState","useRef","composedRefs","useComposedRefs","heightRef","height","current","widthRef","width","isOpen","useLayoutEffect","node","originalTransition","style","transition","originalAnimation","animation","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      const originalTransition = node.style.transition;\n      const originalAnimation = node.style.animation;\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transition = 'none';\n      node.style.animation = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up\n      node.style.transition = originalTransition;\n      node.style.animation = originalAnimation;\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"]},"metadata":{},"sourceType":"module"}
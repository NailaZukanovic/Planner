{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-collapsible\";\nimport { createCollapsibleScope as r } from \"@radix-ui/react-collapsible\";\nimport { Primitive as t } from \"@radix-ui/react-primitive\";\nimport { useControllableState as c } from \"@radix-ui/react-use-controllable-state\";\nimport { composeEventHandlers as n } from \"@radix-ui/primitive\";\nimport { useComposedRefs as i } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport d from \"react\";\nimport l from \"@babel/runtime/helpers/esm/extends\";\nconst s = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\"],\n      [p, f] = a(\"Accordion\", [r]);\nexport { f as createAccordionScope };\nconst m = r();\nexport const Accordion = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    type: r,\n    ...t\n  } = e;\n\n  if (\"single\" === r) {\n    const e = t;\n    /*#__PURE__*/\n\n    return d.createElement(x, l({}, e, {\n      ref: o\n    }));\n  }\n\n  if (\"multiple\" === r) {\n    const e = t;\n    /*#__PURE__*/\n\n    return d.createElement(w, l({}, e, {\n      ref: o\n    }));\n  }\n\n  throw new Error(\"Missing prop `type` expected on `Accordion`\");\n});\n/*#__PURE__*/\n\nconst [u, g] = p(\"Accordion\"),\n      [A, b] = p(\"Accordion\", {\n  collapsible: !1\n}),\n      x = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    value: r,\n    defaultValue: t,\n    onValueChange: n = () => {},\n    collapsible: i = !1,\n    ...a\n  } = e,\n        [s, p] = c({\n    prop: r,\n    defaultProp: t,\n    onChange: n\n  });\n  /*#__PURE__*/\n\n  return d.createElement(u, {\n    scope: e.__scopeAccordion,\n    value: s ? [s] : [],\n    onItemOpen: p,\n    onItemClose: d.useCallback(() => i && p(\"\"), [i, p])\n  }, /*#__PURE__*/d.createElement(A, {\n    scope: e.__scopeAccordion,\n    collapsible: i\n  }, /*#__PURE__*/d.createElement(_, l({}, a, {\n    ref: o\n  }))));\n}),\n      w = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    value: r,\n    defaultValue: t,\n    onValueChange: n = () => {},\n    ...i\n  } = e,\n        [a = [], s] = c({\n    prop: r,\n    defaultProp: t,\n    onChange: n\n  }),\n        p = d.useCallback(e => s(function () {\n    let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...o, e];\n  }), [s]),\n        f = d.useCallback(e => s(function () {\n    let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return o.filter(o => o !== e);\n  }), [s]);\n  /*#__PURE__*/\n\n  return d.createElement(u, {\n    scope: e.__scopeAccordion,\n    value: a,\n    onItemOpen: p,\n    onItemClose: f\n  }, /*#__PURE__*/d.createElement(A, {\n    scope: e.__scopeAccordion,\n    collapsible: !0\n  }, /*#__PURE__*/d.createElement(_, l({}, i, {\n    ref: o\n  }))));\n}),\n      [E, v] = p(\"Accordion\"),\n      _ = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    __scopeAccordion: r,\n    disabled: c,\n    ...a\n  } = e,\n        p = d.useRef(new Set()),\n        f = d.useRef(null),\n        m = i(f, o),\n        u = n(e.onKeyDown, e => {\n    var o;\n    const r = e.target;\n    if (!(s.includes(e.key) && (t = r, t instanceof HTMLButtonElement))) return;\n    var t;\n    const c = [...p.current].filter(e => !(null != e && e.disabled)),\n          n = c.length,\n          i = c.indexOf(r);\n    if (-1 === i) return;\n    e.preventDefault();\n    let a = i;\n\n    switch (e.key) {\n      case \"Home\":\n        a = 0;\n        break;\n\n      case \"End\":\n        a = n - 1;\n        break;\n\n      case \"ArrowDown\":\n        a = i + 1;\n        break;\n\n      case \"ArrowUp\":\n        a = i - 1, a < 0 && (a = n - 1);\n    }\n\n    null === (o = c[a % n]) || void 0 === o || o.focus();\n  });\n  /*#__PURE__*/\n\n  return d.createElement(E, {\n    scope: r,\n    triggerNodesRef: p,\n    disabled: c\n  }, /*#__PURE__*/d.createElement(t.div, l({}, a, {\n    ref: m,\n    onKeyDown: c ? void 0 : u\n  })));\n}),\n      [h, C] = p(\"AccordionItem\");\n\nexport const AccordionItem = /*#__PURE__*/d.forwardRef((r, t) => {\n  const {\n    __scopeAccordion: c,\n    value: n,\n    ...i\n  } = r,\n        a = v(\"AccordionItem\", c),\n        s = g(\"AccordionItem\", c),\n        p = m(c),\n        f = e(),\n        u = n && s.value.includes(n) || !1,\n        A = a.disabled || r.disabled;\n  /*#__PURE__*/\n\n  return d.createElement(h, {\n    scope: c,\n    open: u,\n    disabled: A,\n    triggerId: f\n  }, /*#__PURE__*/d.createElement(o.Root, l({\n    \"data-state\": u ? \"open\" : \"closed\"\n  }, p, i, {\n    ref: t,\n    disabled: A,\n    open: u,\n    onOpenChange: e => {\n      e ? s.onItemOpen(n) : s.onItemClose(n);\n    }\n  })));\n});\n/*#__PURE__*/\n\nexport const AccordionHeader = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n    __scopeAccordion: r,\n    ...c\n  } = e,\n        n = C(\"AccordionHeader\", r);\n  /*#__PURE__*/\n\n  return d.createElement(t.h3, l({\n    \"data-state\": (i = n.open, i ? \"open\" : \"closed\"),\n    \"data-disabled\": n.disabled ? \"\" : void 0\n  }, c, {\n    ref: o\n  }));\n  var i;\n});\n/*#__PURE__*/\n\nexport const AccordionTrigger = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n    __scopeAccordion: t,\n    ...c\n  } = e,\n        {\n    triggerNodesRef: n\n  } = v(\"AccordionTrigger\", t),\n        a = C(\"AccordionTrigger\", t),\n        s = b(\"AccordionTrigger\", t),\n        p = m(t),\n        f = d.useRef(null),\n        u = i(f, r);\n  return d.useEffect(() => {\n    const e = n.current,\n          o = f.current;\n    if (o) return e.add(o), () => {\n      e.delete(o);\n    };\n  }, [n]), /*#__PURE__*/d.createElement(o.Trigger, l({\n    \"aria-disabled\": a.open && !s.collapsible || void 0,\n    id: a.triggerId\n  }, p, c, {\n    ref: u\n  }));\n});\n/*#__PURE__*/\n\nexport const AccordionContent = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n    __scopeAccordion: t,\n    ...c\n  } = e,\n        n = C(\"AccordionContent\", t),\n        i = m(t);\n  /*#__PURE__*/\n\n  return d.createElement(o.Content, l({\n    role: \"region\",\n    \"aria-labelledby\": n.triggerId\n  }, i, c, {\n    ref: r,\n    style: {\n      \"--radix-accordion-content-height\": \"var(--radix-collapsible-content-height)\",\n      \"--radix-accordion-content-width\": \"var(--radix-collapsible-content-width)\",\n      ...e.style\n    }\n  }));\n});\n/*#__PURE__*/\n\nexport const Root = Accordion;\nexport const Item = AccordionItem;\nexport const Header = AccordionHeader;\nexport const Trigger = AccordionTrigger;\nexport const Content = AccordionContent;","map":{"version":3,"sources":["packages/react/accordion/src/Accordion.tsx"],"names":["ACCORDION_KEYS","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","_react","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplSingle","ref","multipleProps","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplMultiple","Error","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","defaultValue","value","valueProp","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionValueProvider","scope","__scopeAccordion","onItemOpen","onItemClose","useCallback","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionCollapsibleProvider","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","triggerNodesRef","useRef","Set","accordionRef","composedRefs","useComposedRefs","handleKeyDown","composeEventHandlers","onKeyDown","event","target","includes","key","triggerNodes","current","node","triggerCount","length","triggerIndex","indexOf","preventDefault","nextIndex","focus","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplProvider","Primitive","div","undefined","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionItemProvider","_radixUiReactCollapsible","Root","onOpenChange","AccordionHeader","headerProps","itemContext","h3","AccordionTrigger","triggerProps","collapsibleContext","useEffect","triggerNode","add","delete","Trigger","id","AccordionContent","contentProps","Content","role","style","element","HTMLButtonElement","Item","Header"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n\n    if (type === 'single') {\n      const singleProps = accordionProps as AccordionImplSingleProps;\n      return <AccordionImplSingle {...singleProps} ref={forwardedRef} />;\n    }\n\n    if (type === 'multiple') {\n      const multipleProps = accordionProps as AccordionImplMultipleProps;\n      return <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />;\n    }\n\n    throw new Error(`Missing prop \\`type\\` expected on \\`${ACCORDION_NAME}\\``);\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  triggerNodesRef: React.MutableRefObject<Set<HTMLElement | null>>;\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const triggerNodesRef = React.useRef<Set<AccordionTriggerElement>>(new Set());\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      const target = event.target as HTMLElement;\n      const isAccordionKey = ACCORDION_KEYS.includes(event.key);\n\n      if (!isAccordionKey || !isButton(target)) {\n        return;\n      }\n\n      const triggerNodes = [...triggerNodesRef.current].filter((node) => !node?.disabled);\n      const triggerCount = triggerNodes.length;\n      const triggerIndex = triggerNodes.indexOf(target);\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerNodes[clampedIndex]?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        triggerNodesRef={triggerNodesRef}\n        disabled={disabled}\n      >\n        <Primitive.div\n          {...accordionProps}\n          ref={composedRefs}\n          onKeyDown={disabled ? undefined : handleKeyDown}\n        />\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const { triggerNodesRef } = useAccordionContext(TRIGGER_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const ref = React.useRef<AccordionTriggerElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n\n    React.useEffect(() => {\n      const triggerNodes = triggerNodesRef.current;\n      const triggerNode = ref.current;\n\n      if (triggerNode) {\n        triggerNodes.add(triggerNode);\n        return () => {\n          triggerNodes.delete(triggerNode);\n        };\n      }\n      return;\n    }, [triggerNodesRef]);\n\n    return (\n      <CollapsiblePrimitive.Trigger\n        aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n        id={itemContext.triggerId}\n        {...collapsibleScope}\n        {...triggerProps}\n        ref={composedRefs}\n      />\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction isButton(element: HTMLElement): element is HTMLButtonElement {\n  return element instanceof HTMLButtonElement;\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"]},"metadata":{},"sourceType":"module"}
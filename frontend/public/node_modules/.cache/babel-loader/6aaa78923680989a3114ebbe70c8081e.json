{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\n\nfunction useTransition(_ref) {\n  let {\n    duration,\n    timingFunction,\n    mounted,\n    onEnter,\n    onExit,\n    onEntered,\n    onExited\n  } = _ref;\n  const theme = useMantineTheme();\n  const reduceMotion = useReducedMotion();\n  const transitionDuration = reduceMotion ? 0 : duration;\n  const [transitionStatus, setStatus] = useState(mounted ? \"entered\" : \"exited\");\n  const timeoutRef = useRef(-1);\n\n  const handleStateChange = shouldMount => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n    setStatus(shouldMount ? \"pre-entering\" : \"pre-exiting\");\n    window.clearTimeout(timeoutRef.current);\n    const preStateTimeout = window.setTimeout(() => {\n      typeof preHandler === \"function\" && preHandler();\n      setStatus(shouldMount ? \"entering\" : \"exiting\");\n    }, 10);\n    timeoutRef.current = window.setTimeout(() => {\n      window.clearTimeout(preStateTimeout);\n      typeof handler === \"function\" && handler();\n      setStatus(shouldMount ? \"entered\" : \"exited\");\n    }, transitionDuration);\n  };\n\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction\n  };\n}\n\nexport { useTransition };","map":{"version":3,"sources":["../../../src/components/Transition/use-transition.ts"],"names":[],"mappings":";;;;AAGO,SAAS,aAAT,OAQJ;AAAA,MAR2B;AAC5B,IAAA,QAD4B;AAE5B,IAAA,cAF4B;AAG5B,IAAA,OAH4B;AAI5B,IAAA,OAJ4B;AAK5B,IAAA,MAL4B;AAM5B,IAAA,SAN4B;AAO5B,IAAA;AAP4B,GAQ3B;AACD,QAAM,KAAK,GAAG,eAAe,EAA7B;AACA,QAAM,YAAY,GAAG,gBAAgB,EAArC;AACA,QAAM,kBAAkB,GAAG,YAAY,GAAG,CAAH,GAAO,QAA9C;AACA,QAAM,CAAC,gBAAD,EAAmB,SAAnB,IAAgC,QAAQ,CAAC,OAAO,GAAG,SAAH,GAAe,QAAvB,CAA9C;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAF,CAAzB;;AACA,QAAM,iBAAiB,GAAI,WAAD,IAAiB;AACzC,UAAM,UAAU,GAAG,WAAW,GAAG,OAAH,GAAa,MAA3C;AACA,UAAM,OAAO,GAAG,WAAW,GAAG,SAAH,GAAe,QAA1C;AACA,IAAA,SAAS,CAAC,WAAW,GAAG,cAAH,GAAoB,aAAhC,CAAT;AACA,IAAA,MAAM,CAAC,YAAP,CAAoB,UAAU,CAAC,OAA/B;AACA,UAAM,eAAe,GAAG,MAAM,CAAC,UAAP,CAAkB,MAAM;AAC9C,aAAO,UAAP,KAAsB,UAAtB,IAAoC,UAAU,EAA9C;AACA,MAAA,SAAS,CAAC,WAAW,GAAG,UAAH,GAAgB,SAA5B,CAAT;AACD,KAHuB,EAGrB,EAHqB,CAAxB;AAIA,IAAA,UAAU,CAAC,OAAX,GAAqB,MAAM,CAAC,UAAP,CAAkB,MAAM;AAC3C,MAAA,MAAM,CAAC,YAAP,CAAoB,eAApB;AACA,aAAO,OAAP,KAAmB,UAAnB,IAAiC,OAAO,EAAxC;AACA,MAAA,SAAS,CAAC,WAAW,GAAG,SAAH,GAAe,QAA3B,CAAT;AACD,KAJoB,EAIlB,kBAJkB,CAArB;AAKD,GAdD;;AAeA,EAAA,YAAY,CAAC,MAAM;AACjB,IAAA,iBAAiB,CAAC,OAAD,CAAjB;AACD,GAFW,EAET,CAAC,OAAD,CAFS,CAAZ;AAGA,EAAA,SAAS,CAAC,MAAM,MAAM,MAAM,CAAC,YAAP,CAAoB,UAAU,CAAC,OAA/B,CAAb,EAAsD,EAAtD,CAAT;AACA,SAAO;AACL,IAAA,kBADK;AAEL,IAAA,gBAFK;AAGL,IAAA,wBAAwB,EAAE,cAAc,IAAI,KAAK,CAAC;AAH7C,GAAP;AAKF","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useReducedMotion, useDidUpdate } from '@mantine/hooks';\nimport { useMantineTheme } from '@mantine/styles';\n\nexport type TransitionStatus =\n  | 'entered'\n  | 'exited'\n  | 'entering'\n  | 'exiting'\n  | 'pre-exiting'\n  | 'pre-entering';\n\ninterface UseTransition {\n  duration: number;\n  timingFunction: string;\n  mounted: boolean;\n  onEnter?(): void;\n  onExit?(): void;\n  onEntered?(): void;\n  onExited?(): void;\n}\n\nexport function useTransition({\n  duration,\n  timingFunction,\n  mounted,\n  onEnter,\n  onExit,\n  onEntered,\n  onExited,\n}: UseTransition) {\n  const theme = useMantineTheme();\n  const reduceMotion = useReducedMotion();\n  const transitionDuration = reduceMotion ? 0 : duration;\n  const [transitionStatus, setStatus] = useState<TransitionStatus>(mounted ? 'entered' : 'exited');\n  const timeoutRef = useRef<number>(-1);\n\n  const handleStateChange = (shouldMount: boolean) => {\n    const preHandler = shouldMount ? onEnter : onExit;\n    const handler = shouldMount ? onEntered : onExited;\n\n    setStatus(shouldMount ? 'pre-entering' : 'pre-exiting');\n    window.clearTimeout(timeoutRef.current);\n\n    const preStateTimeout = window.setTimeout(() => {\n      typeof preHandler === 'function' && preHandler();\n      setStatus(shouldMount ? 'entering' : 'exiting');\n    }, 10);\n\n    timeoutRef.current = window.setTimeout(() => {\n      window.clearTimeout(preStateTimeout);\n      typeof handler === 'function' && handler();\n      setStatus(shouldMount ? 'entered' : 'exited');\n    }, transitionDuration);\n  };\n\n  useDidUpdate(() => {\n    handleStateChange(mounted);\n  }, [mounted]);\n\n  useEffect(() => () => window.clearTimeout(timeoutRef.current), []);\n\n  return {\n    transitionDuration,\n    transitionStatus,\n    transitionTimingFunction: timingFunction || theme.transitionTimingFunction,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\Weather.jsx\";\nimport React, { Component } from 'react';\nimport './Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WUNDERGROUND_KEY = \"b56f2c0800fdf6e4\";\nconst ICON_SET = {\n  chancesleet: \"snowy\",\n  chancesnow: \"snowy\",\n  clear: \"sunny\",\n  flurries: \"snowy\",\n  fog: \"cloudy\",\n  hazy: \"cloudy\",\n  rain: \"rainy\",\n  chancerain: \"rainy\",\n  sleet: \"snowy\",\n  snow: \"snowy\",\n  chanceflurries: \"snowy\",\n  tstorms: \"stormy\",\n  chancetstorms: \"stormy\",\n  sunny: \"sunny\",\n  mostlysunny: \"sunny\",\n  partlysunny: \"sunny\",\n  partlycloudy: \"cloudy\",\n  mostlycloudy: \"cloudy\",\n  cloudy: \"cloudy\"\n};\nconst SUPPORTED_LANGUAGES = [\"AF\", \"AL\", \"AR\", \"HY\", \"AZ\", \"EU\", \"BY\", \"BU\", \"LI\", \"MY\", \"CA\", \"CN\", \"TW\", \"CR\", \"CZ\", \"DK\", \"DV\", \"NL\", \"EN\", \"EO\", \"ET\", \"FA\", \"FI\", \"FR\", \"FC\", \"GZ\", \"DL\", \"KA\", \"GR\", \"GU\", \"HT\", \"IL\", \"HI\", \"HU\", \"IS\", \"IO\", \"ID\", \"IR\", \"IT\", \"JP\", \"JW\", \"KM\", \"KR\", \"KU\", \"LA\", \"LV\", \"LT\", \"ND\", \"MK\", \"MT\", \"GM\", \"MI\", \"MR\", \"MN\", \"NO\", \"OC\", \"PS\", \"GN\", \"PL\", \"BR\", \"PA\", \"RO\", \"RU\", \"SR\", \"SK\", \"SL\", \"SP\", \"SI\", \"SW\", \"CH\", \"TL\", \"TT\", \"TH\", \"TR\", \"TK\", \"UA\", \"UZ\", \"VU\", \"CY\", \"SN\", \"JI\", \"YI\"];\n\nfunction getIcon(icon) {\n  return ICON_SET[icon];\n}\n\nfunction getTemp(text) {\n  return (text.match(/(\\-?[0-9]+)/) || [])[1];\n}\n\nclass Weather extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        this.setState({\n          coordinates: pos.coords\n        });\n        this.check();\n      }, () => {\n        this.check();\n      }, options);\n    }\n\n    this.check();\n    setInterval(() => this.check(), 10 * 60 * 1000);\n  }\n\n  check() {\n    fetch(\"https://ipinfo.io/json\").then(res => res.json()).then(ip => {\n      let lang = ip.country;\n\n      if (!SUPPORTED_LANGUAGES.includes(lang)) {\n        lang = \"EN\";\n      }\n\n      let crd = this.state.coordinates;\n      crd = crd || {\n        latitude: +ip.loc.split(\",\")[0],\n        longitude: +ip.loc.split(\",\")[1]\n      };\n      const query = [crd.latitude, crd.longitude].join(\",\");\n      const WUNDERGROUND_URL = `https://api.wunderground.com/api/${WUNDERGROUND_KEY}/forecast/lang:${lang}/q/${query}.json`;\n      return fetch(WUNDERGROUND_URL);\n    }).then(c => c.json()).then(forecast => {\n      this.setState({\n        forecast\n      });\n    });\n  }\n\n  renderWeatherToday() {\n    const today = this.state.forecast.forecast.txt_forecast.forecastday[0];\n    const temp = getTemp(today.fcttext_metric);\n    let icon = getIcon(today.icon);\n    let hours = new Date().getHours();\n\n    if ((icon === \"sunny\" || icon === \"clear\") && (hours > 20 || hours < 7)) {\n      icon = \"starry\";\n    }\n\n    if (temp) {\n      var tempElm = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"big-temp\",\n        children: temp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-today\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `icon-big ${icon}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this), tempElm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"icon-description\",\n        children: today.fcttext_metric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }, this);\n  }\n\n  renderDay(day, index) {\n    const temp = getTemp(day.fcttext_metric);\n\n    if (temp) {\n      var tempElm = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"small-temp\",\n        children: temp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-description\",\n        children: day.fcttext_metric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `icon-small ${getIcon(day.icon)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), tempElm]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderNextDays() {\n    const nextDays = [],\n          data = this.state.forecast.forecast.txt_forecast.forecastday;\n\n    for (var i = 2; i < data.length; i += 2) {\n      nextDays.push(data[i]);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-next-days\",\n      children: nextDays.map((c, i) => this.renderDay(c, i))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this);\n  }\n\n  renderWeather() {\n    if (!this.state.forecast) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-container\",\n      children: [this.renderWeatherToday(), this.renderNextDays()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        children: this.renderWeather()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/Weather.jsx"],"names":["React","Component","WUNDERGROUND_KEY","ICON_SET","chancesleet","chancesnow","clear","flurries","fog","hazy","rain","chancerain","sleet","snow","chanceflurries","tstorms","chancetstorms","sunny","mostlysunny","partlysunny","partlycloudy","mostlycloudy","cloudy","SUPPORTED_LANGUAGES","getIcon","icon","getTemp","text","match","Weather","constructor","props","state","options","enableHighAccuracy","timeout","maximumAge","navigator","geolocation","getCurrentPosition","pos","setState","coordinates","coords","check","setInterval","fetch","then","res","json","ip","lang","country","includes","crd","latitude","loc","split","longitude","query","join","WUNDERGROUND_URL","c","forecast","renderWeatherToday","today","txt_forecast","forecastday","temp","fcttext_metric","hours","Date","getHours","tempElm","renderDay","day","index","renderNextDays","nextDays","data","i","length","push","map","renderWeather","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,WAAW,EAAE,OADA;AAEbC,EAAAA,UAAU,EAAE,OAFC;AAGbC,EAAAA,KAAK,EAAE,OAHM;AAIbC,EAAAA,QAAQ,EAAE,OAJG;AAKbC,EAAAA,GAAG,EAAE,QALQ;AAMbC,EAAAA,IAAI,EAAE,QANO;AAObC,EAAAA,IAAI,EAAE,OAPO;AAQbC,EAAAA,UAAU,EAAE,OARC;AASbC,EAAAA,KAAK,EAAE,OATM;AAUbC,EAAAA,IAAI,EAAE,OAVO;AAWbC,EAAAA,cAAc,EAAE,OAXH;AAYbC,EAAAA,OAAO,EAAE,QAZI;AAabC,EAAAA,aAAa,EAAE,QAbF;AAcbC,EAAAA,KAAK,EAAE,OAdM;AAebC,EAAAA,WAAW,EAAE,OAfA;AAgBbC,EAAAA,WAAW,EAAE,OAhBA;AAiBbC,EAAAA,YAAY,EAAE,QAjBD;AAkBbC,EAAAA,YAAY,EAAE,QAlBD;AAmBbC,EAAAA,MAAM,EAAE;AAnBK,CAAjB;AAsBA,MAAMC,mBAAmB,GAAG,CACxB,IADwB,EAClB,IADkB,EACZ,IADY,EACN,IADM,EACA,IADA,EAExB,IAFwB,EAElB,IAFkB,EAEZ,IAFY,EAEN,IAFM,EAEA,IAFA,EAGxB,IAHwB,EAGlB,IAHkB,EAGZ,IAHY,EAGN,IAHM,EAGA,IAHA,EAIxB,IAJwB,EAIlB,IAJkB,EAIZ,IAJY,EAIN,IAJM,EAIA,IAJA,EAKxB,IALwB,EAKlB,IALkB,EAKZ,IALY,EAKN,IALM,EAKA,IALA,EAMxB,IANwB,EAMlB,IANkB,EAMZ,IANY,EAMN,IANM,EAMA,IANA,EAOxB,IAPwB,EAOlB,IAPkB,EAOZ,IAPY,EAON,IAPM,EAOA,IAPA,EAQxB,IARwB,EAQlB,IARkB,EAQZ,IARY,EAQN,IARM,EAQA,IARA,EASxB,IATwB,EASlB,IATkB,EASZ,IATY,EASN,IATM,EASA,IATA,EAUxB,IAVwB,EAUlB,IAVkB,EAUZ,IAVY,EAUN,IAVM,EAUA,IAVA,EAWxB,IAXwB,EAWlB,IAXkB,EAWZ,IAXY,EAWN,IAXM,EAWA,IAXA,EAYxB,IAZwB,EAYlB,IAZkB,EAYZ,IAZY,EAYN,IAZM,EAYA,IAZA,EAaxB,IAbwB,EAalB,IAbkB,EAaZ,IAbY,EAaN,IAbM,EAaA,IAbA,EAcxB,IAdwB,EAclB,IAdkB,EAcZ,IAdY,EAcN,IAdM,EAcA,IAdA,EAexB,IAfwB,EAelB,IAfkB,EAeZ,IAfY,EAeN,IAfM,EAeA,IAfA,EAgBxB,IAhBwB,EAgBlB,IAhBkB,EAgBZ,IAhBY,EAgBN,IAhBM,EAgBA,IAhBA,EAiBxB,IAjBwB,EAiBlB,IAjBkB,CAA5B;;AAoBA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,SAAOtB,QAAQ,CAACsB,IAAD,CAAf;AACH;;AAED,SAASC,OAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAO,CAACA,IAAI,CAACC,KAAL,CAAW,aAAX,KAA6B,EAA9B,EAAkC,CAAlC,CAAP;AACH;;AAGD,MAAMC,OAAN,SAAsB5B,SAAtB,CAAgC;AAE9B6B,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA,QAAIC,OAAO,GAAG;AACjBC,MAAAA,kBAAkB,EAAE,IADH;AAEjBC,MAAAA,OAAO,EAAE,IAFQ;AAGjBC,MAAAA,UAAU,EAAE;AAHK,KAAd;;AAMA,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACvBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,GAAG,IAAI;AAC5C,aAAKC,QAAL,CAAc;AACVC,UAAAA,WAAW,EAAEF,GAAG,CAACG;AADP,SAAd;AAGA,aAAKC,KAAL;AACH,OALD,EAKG,MAAM;AACL,aAAKA,KAAL;AACH,OAPD,EAOGX,OAPH;AAQH;;AAED,SAAKW,KAAL;AAEAC,IAAAA,WAAW,CAAC,MAAM,KAAKD,KAAL,EAAP,EAAqB,KAAK,EAAL,GAAU,IAA/B,CAAX;AACH;;AAEDA,EAAAA,KAAK,GAAI;AACLE,IAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,EAAE,IAAI;AACR,UAAIC,IAAI,GAAGD,EAAE,CAACE,OAAd;;AACA,UAAI,CAAC7B,mBAAmB,CAAC8B,QAApB,CAA6BF,IAA7B,CAAL,EAAyC;AACrCA,QAAAA,IAAI,GAAG,IAAP;AACH;;AACD,UAAIG,GAAG,GAAG,KAAKtB,KAAL,CAAWU,WAArB;AACAY,MAAAA,GAAG,GAAGA,GAAG,IAAI;AACTC,QAAAA,QAAQ,EAAE,CAACL,EAAE,CAACM,GAAH,CAAOC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CADF;AAETC,QAAAA,SAAS,EAAE,CAACR,EAAE,CAACM,GAAH,CAAOC,KAAP,CAAa,GAAb,EAAkB,CAAlB;AAFH,OAAb;AAIA,YAAME,KAAK,GAAG,CAACL,GAAG,CAACC,QAAL,EAAeD,GAAG,CAACI,SAAnB,EAA8BE,IAA9B,CAAmC,GAAnC,CAAd;AACA,YAAMC,gBAAgB,GAAI,oCAAmC3D,gBAAiB,kBAAiBiD,IAAK,MAAKQ,KAAM,OAA/G;AACA,aAAOb,KAAK,CAACe,gBAAD,CAAZ;AACH,KAfH,EAgBGd,IAhBH,CAgBQe,CAAC,IAAIA,CAAC,CAACb,IAAF,EAhBb,EAiBGF,IAjBH,CAiBQgB,QAAQ,IAAI;AACd,WAAKtB,QAAL,CAAc;AACVsB,QAAAA;AADU,OAAd;AAGH,KArBH;AAsBH;;AAEDC,EAAAA,kBAAkB,GAAI;AAClB,UAAMC,KAAK,GAAG,KAAKjC,KAAL,CAAW+B,QAAX,CAAoBA,QAApB,CAA6BG,YAA7B,CAA0CC,WAA1C,CAAsD,CAAtD,CAAd;AACA,UAAMC,IAAI,GAAG1C,OAAO,CAACuC,KAAK,CAACI,cAAP,CAApB;AAGA,QAAI5C,IAAI,GAAGD,OAAO,CAACyC,KAAK,CAACxC,IAAP,CAAlB;AACA,QAAI6C,KAAK,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;;AACA,QAAI,CAAC/C,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,OAA9B,MAA2C6C,KAAK,GAAG,EAAR,IAAcA,KAAK,GAAG,CAAjE,CAAJ,EAAyE;AACrE7C,MAAAA,IAAI,GAAG,QAAP;AACH;;AAGD,QAAI2C,IAAJ,EAAU;AACN,UAAIK,OAAO,gBAAG;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBAA2BL;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAd;AACH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAG,YAAW3C,IAAK;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGKgD,OAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA,kBAAiCR,KAAK,CAACI;AAAvC;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAEDK,EAAAA,SAAS,CAAEC,GAAF,EAAOC,KAAP,EAAc;AACnB,UAAMR,IAAI,GAAG1C,OAAO,CAACiD,GAAG,CAACN,cAAL,CAApB;;AACA,QAAID,IAAJ,EAAU;AACN,UAAIK,OAAO,gBAAG;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBAA6BL;AAA7B;AAAA;AAAA;AAAA;AAAA,cAAd;AACH;;AAED,wBACM;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBACKO,GAAG,CAACN;AADT;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAG,cAAa7C,OAAO,CAACmD,GAAG,CAAClD,IAAL,CAAW;AAAhD;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGKgD,OAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,OAA0BG,KAA1B;AAAA;AAAA;AAAA;AAAA,YADN;AAYH;;AAEDC,EAAAA,cAAc,GAAI;AACd,UAAMC,QAAQ,GAAG,EAAjB;AAAA,UACMC,IAAI,GAAG,KAAK/C,KAAL,CAAW+B,QAAX,CAAoBA,QAApB,CAA6BG,YAA7B,CAA0CC,WADvD;;AAIA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvCF,MAAAA,QAAQ,CAACI,IAAT,CAAcH,IAAI,CAACC,CAAD,CAAlB;AACD;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBACGF,QAAQ,CAACK,GAAT,CAAa,CAACrB,CAAD,EAAIkB,CAAJ,KAAU,KAAKN,SAAL,CAAeZ,CAAf,EAAkBkB,CAAlB,CAAvB;AADH;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAEDI,EAAAA,aAAa,GAAI;AACb,QAAI,CAAC,KAAKpD,KAAL,CAAW+B,QAAhB,EAA0B;AACtB,0BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADF;AAKH;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,iBACK,KAAKC,kBAAL,EADL,EAEK,KAAKa,cAAL,EAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMH;;AAEDQ,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACK,KAAKD,aAAL;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOD;;AA7I6B;;AAgJhC,eAAevD,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './Weather.css';\r\n\r\nconst WUNDERGROUND_KEY = \"b56f2c0800fdf6e4\";\r\n\r\nconst ICON_SET = {\r\n    chancesleet: \"snowy\",\r\n    chancesnow: \"snowy\",\r\n    clear: \"sunny\",\r\n    flurries: \"snowy\",\r\n    fog: \"cloudy\",\r\n    hazy: \"cloudy\",\r\n    rain: \"rainy\",\r\n    chancerain: \"rainy\",\r\n    sleet: \"snowy\",\r\n    snow: \"snowy\",\r\n    chanceflurries: \"snowy\",\r\n    tstorms: \"stormy\",\r\n    chancetstorms: \"stormy\",\r\n    sunny: \"sunny\",\r\n    mostlysunny: \"sunny\",\r\n    partlysunny: \"sunny\",\r\n    partlycloudy: \"cloudy\",\r\n    mostlycloudy: \"cloudy\",\r\n    cloudy: \"cloudy\"\r\n};\r\n\r\nconst SUPPORTED_LANGUAGES = [\r\n    \"AF\", \"AL\", \"AR\", \"HY\", \"AZ\",\r\n    \"EU\", \"BY\", \"BU\", \"LI\", \"MY\",\r\n    \"CA\", \"CN\", \"TW\", \"CR\", \"CZ\",\r\n    \"DK\", \"DV\", \"NL\", \"EN\", \"EO\",\r\n    \"ET\", \"FA\", \"FI\", \"FR\", \"FC\",\r\n    \"GZ\", \"DL\", \"KA\", \"GR\", \"GU\",\r\n    \"HT\", \"IL\", \"HI\", \"HU\", \"IS\",\r\n    \"IO\", \"ID\", \"IR\", \"IT\", \"JP\",\r\n    \"JW\", \"KM\", \"KR\", \"KU\", \"LA\",\r\n    \"LV\", \"LT\", \"ND\", \"MK\", \"MT\",\r\n    \"GM\", \"MI\", \"MR\", \"MN\", \"NO\",\r\n    \"OC\", \"PS\", \"GN\", \"PL\", \"BR\",\r\n    \"PA\", \"RO\", \"RU\", \"SR\", \"SK\",\r\n    \"SL\", \"SP\", \"SI\", \"SW\", \"CH\",\r\n    \"TL\", \"TT\", \"TH\", \"TR\", \"TK\",\r\n    \"UA\", \"UZ\", \"VU\", \"CY\", \"SN\",\r\n    \"JI\", \"YI\"\r\n];\r\n\r\nfunction getIcon(icon) {\r\n    return ICON_SET[icon];\r\n}\r\n\r\nfunction getTemp (text) {\r\n    return (text.match(/(\\-?[0-9]+)/) || [])[1];\r\n}\r\n\r\n\r\nclass Weather extends Component {\r\n\r\n  constructor (props) {\r\n      super(props);\r\n      this.state = {};\r\n\r\n      var options = {\r\n\t  enableHighAccuracy: true,\r\n\t  timeout: 5000,\r\n\t  maximumAge: 0\r\n      };\r\n\r\n      if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(pos => {\r\n              this.setState({\r\n                  coordinates: pos.coords\r\n              });\r\n              this.check();\r\n          }, () => {\r\n              this.check();\r\n          }, options);\r\n      }\r\n\r\n      this.check();\r\n\r\n      setInterval(() => this.check(), 10 * 60 * 1000);\r\n  }\r\n\r\n  check () {\r\n      fetch(\"https://ipinfo.io/json\")\r\n        .then(res => res.json())\r\n        .then(ip => {\r\n            let lang = ip.country;\r\n            if (!SUPPORTED_LANGUAGES.includes(lang)) {\r\n                lang = \"EN\";\r\n            }\r\n            let crd = this.state.coordinates;\r\n            crd = crd || {\r\n                latitude: +ip.loc.split(\",\")[0]\r\n              , longitude: +ip.loc.split(\",\")[1]\r\n            }\r\n            const query = [crd.latitude, crd.longitude].join(\",\");\r\n            const WUNDERGROUND_URL = `https://api.wunderground.com/api/${WUNDERGROUND_KEY}/forecast/lang:${lang}/q/${query}.json`;\r\n            return fetch(WUNDERGROUND_URL)\r\n        })\r\n        .then(c => c.json())\r\n        .then(forecast => {\r\n            this.setState({\r\n                forecast\r\n            });\r\n        });\r\n  }\r\n\r\n  renderWeatherToday () {\r\n      const today = this.state.forecast.forecast.txt_forecast.forecastday[0];\r\n      const temp = getTemp(today.fcttext_metric);\r\n\r\n\r\n      let icon = getIcon(today.icon);\r\n      let hours = new Date().getHours();\r\n      if ((icon === \"sunny\" || icon === \"clear\") && (hours > 20 || hours < 7)) {\r\n          icon = \"starry\";\r\n      }\r\n\r\n\r\n      if (temp) {\r\n          var tempElm = <div className=\"big-temp\">{temp}</div>;\r\n      }\r\n\r\n      return (\r\n          <div className=\"weather-today\">\r\n            <div className=\"icon-wrapper\">\r\n                <div className={`icon-big ${icon}`}>\r\n                </div>\r\n                {tempElm}\r\n            </div>\r\n            <p className=\"icon-description\">{today.fcttext_metric}</p>\r\n          </div>\r\n      );\r\n  }\r\n\r\n  renderDay (day, index) {\r\n      const temp = getTemp(day.fcttext_metric);\r\n      if (temp) {\r\n          var tempElm = <div className=\"small-temp\">{temp}</div>;\r\n      }\r\n\r\n      return (\r\n            <div className=\"day\" key={index}>\r\n                <div className=\"day-description\">\r\n                    {day.fcttext_metric}\r\n                </div>\r\n                <div className=\"icon-wrapper\">\r\n                    <div className={`icon-small ${getIcon(day.icon)}`}>\r\n                    </div>\r\n                    {tempElm}\r\n                </div>\r\n            </div>\r\n      );\r\n  }\r\n\r\n  renderNextDays () {\r\n      const nextDays = []\r\n          , data = this.state.forecast.forecast.txt_forecast.forecastday\r\n          ;\r\n\r\n      for (var i = 2; i < data.length; i += 2) {\r\n        nextDays.push(data[i])\r\n      }\r\n\r\n      return (\r\n          <div className=\"weather-next-days\">\r\n            {nextDays.map((c, i) => this.renderDay(c, i))}\r\n          </div>\r\n      );\r\n  }\r\n\r\n  renderWeather () {\r\n      if (!this.state.forecast) {\r\n          return (\r\n            <div className=\"weather-container\">\r\n                <p>Loading...</p>\r\n            </div>\r\n          );\r\n      }\r\n      return (\r\n        <div className=\"weather-container\">\r\n            {this.renderWeatherToday()}\r\n            {this.renderNextDays()}\r\n        </div>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div className=\"app\">\r\n                {this.renderWeather()}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;"]},"metadata":{},"sourceType":"module"}
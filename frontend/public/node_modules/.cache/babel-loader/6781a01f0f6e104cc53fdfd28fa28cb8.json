{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\Calendar.jsx\";\n// import React, { useEffect, useState } from 'react';\n// import Kalend, { CalendarEvent, CalendarView, OnEventDragFinish } from 'calend';\n// import 'calend/dist/styles/index.css';\n// import toast, { Toaster } from 'react-hot-toast';\n// import { OnEventClickData } from 'calend';\n// const CalendComponent = () => {\n//   useEffect(() => {\n//     notify();\n//   }, []);\n//   const events = {\n//     '01-11-2021': [\n//         {\n//         id: 1,\n//         startAt: '2021-11-21T18:00:00.000Z',\n//         endAt: '2021-11-21T19:00:00.000Z',\n//         summary: 'test',\n//         color: 'blue',\n//         }\n//     ],\n//     '21-11-2021': [\n//         {\n//         id: 2,\n//         startAt: '2021-11-21T18:00:00.000Z',\n//         endAt: '2021-11-21T19:00:00.000Z',\n//         summary: 'test',\n//         color: 'blue',\n//         }\n//     ]\n// }\n// const notify = () => toast(\"Don't you worry, don't you worry, child \\n See heaven's got a plan for you\", {\n//   icon: '🛩️',\n// });\n//   const [demoEvents, setDemoEvents] = useState(events);\n//   const onNewEventClick = (demoEvents) => {\n//     console.log(demoEvents);\n//   };\n//   const onShowMoreMonthClick = (demoEvents) => {\n//     console.log(demoEvents);\n//   };\n//   const onEventClick = (demoEvents) => {\n//     console.log(demoEvents);\n//     //modal for this\n//   };\n//   // const OnEventDragFinish = (\n//   //   updatedEvent,\n//   //   events\n//   // ) => {\n//   //   console.log(events, updatedEvent);\n//   // };\n//   return (\n//     <>\n//       <Toaster\n//         position=\"top-center\"\n//         reverseOrder={false}\n//       />\n//       <Kalend\n//         onNewEventClick={onNewEventClick}\n//         initialView={CalendarView.WEEK}\n//         disabledViews={[]}\n//         onEventClick={onEventClick}\n//         events={demoEvents}\n//         initialDate={new Date().toISOString()}\n//         hourHeight={60}\n//         showMoreMonth={onShowMoreMonthClick}\n//         timezone={'Europe/Berlin'}\n//         // onEventDragFinish={onEventDragFinish}\n//       />\n//     </>\n//   );\n// };\n// export default CalendComponent;\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as React from 'react';\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject, Resize, DragAndDrop } from '@syncfusion/ej2-react-schedule';\nimport { applyCategoryColor } from './Helper';\nimport { extend } from '@syncfusion/ej2-base';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\nimport { SampleBase } from './Sample-base';\nimport { PropertyPane } from './Property-pane'; // import * as dataSource from './datasource.json';\n\n/**\r\n * Schedule events sample\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Events extends SampleBase {\n  constructor() {\n    super(...arguments);\n    this.data = extend([], dataSource.scheduleData, null, true);\n  }\n\n  onEventRendered(args) {\n    applyCategoryColor(args, this.scheduleObj.currentView);\n  }\n\n  onClear() {\n    document.getElementById('EventLog').innerHTML = '';\n  }\n\n  onCreate() {\n    this.appendElement('Schedule <b>Load</b> event is triggered<hr>');\n  }\n\n  onActionBegin() {\n    this.appendElement('Schedule <b>Action Begin</b> event is triggered<hr>');\n  }\n\n  onActionComplete() {\n    this.appendElement('Schedule <b>Action Complete</b> event is triggered<hr>');\n  }\n\n  onActionFailure() {\n    this.appendElement('Schedule <b>Action Failure</b> event is triggered<hr>');\n  }\n\n  onCellDoubleClick() {\n    this.appendElement('SChedule <b>Cell Double Click</b> event is triggered<hr>');\n  }\n\n  onCellClick() {\n    this.appendElement('Schedule <b>Cell Click</b> event is triggered<hr>');\n  }\n\n  onNavigating() {\n    this.appendElement('Schedule <b>Navigating</b> event is triggered<hr>');\n  }\n\n  onDestroyed() {\n    this.appendElement('Schedule <b>Destroyed</b> event is triggered<hr>');\n  }\n\n  onEventClick() {\n    this.appendElement('Schedule <b>Event Click</b> event is triggered<hr>');\n  }\n\n  onPopupOpen() {\n    this.appendElement('Schedule <b>Popup Open</b> event is triggered<hr>');\n  }\n\n  appendElement(html) {\n    let span = document.createElement('span');\n    span.innerHTML = html;\n    let log = document.getElementById('EventLog');\n    log.insertBefore(span, log.firstChild);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-control-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-9 control-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(ScheduleComponent, {\n            ref: schedule => this.scheduleObj = schedule,\n            width: \"100%\",\n            height: \"650px\",\n            selectedDate: new Date(2021, 0, 10),\n            eventSettings: {\n              dataSource: this.data\n            },\n            created: this.onCreate.bind(this),\n            eventRendered: this.onEventRendered.bind(this),\n            actionBegin: this.onActionBegin.bind(this),\n            actionComplete: this.onActionComplete.bind(this),\n            actionFailure: this.onActionFailure.bind(this),\n            cellClick: this.onCellClick.bind(this),\n            cellDoubleClick: this.onCellDoubleClick.bind(this),\n            destroyed: this.onDestroyed.bind(this),\n            navigating: this.onNavigating.bind(this),\n            eventClick: this.onEventClick.bind(this),\n            popupOpen: this.onPopupOpen.bind(this),\n            children: /*#__PURE__*/_jsxDEV(Inject, {\n              services: [Day, Week, WorkWeek, Month, Agenda, Resize, DragAndDrop]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-3 property-section\",\n        children: /*#__PURE__*/_jsxDEV(PropertyPane, {\n          title: \"Event Trace\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"property\",\n            title: \"Properties\",\n            className: \"property-panel-table\",\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  height: '250px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"eventarea\",\n                    style: {\n                      height: '245px',\n                      overflow: 'auto'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"EventLog\",\n                      id: \"EventLog\",\n                      style: {\n                        wordBreak: 'normal'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  height: '50px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    width: '30%'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"evtbtn\",\n                    style: {\n                      paddingBottom: '10px'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(ButtonComponent, {\n                      title: \"Clear\",\n                      onClick: this.onClear.bind(this),\n                      children: \"Clear\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/Calendar.jsx"],"names":["render","React","ScheduleComponent","Day","Week","WorkWeek","Month","Agenda","Inject","Resize","DragAndDrop","applyCategoryColor","extend","ButtonComponent","SampleBase","PropertyPane","Events","constructor","arguments","data","dataSource","scheduleData","onEventRendered","args","scheduleObj","currentView","onClear","document","getElementById","innerHTML","onCreate","appendElement","onActionBegin","onActionComplete","onActionFailure","onCellDoubleClick","onCellClick","onNavigating","onDestroyed","onEventClick","onPopupOpen","html","span","createElement","log","insertBefore","firstChild","schedule","Date","bind","width","height","overflow","wordBreak","paddingBottom"],"mappings":"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","sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import Kalend, { CalendarEvent, CalendarView, OnEventDragFinish } from 'calend';\r\n// import 'calend/dist/styles/index.css';\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import { OnEventClickData } from 'calend';\r\n\r\n\r\n\r\n// const CalendComponent = () => {\r\n\r\n//   useEffect(() => {\r\n//     notify();\r\n//   }, []);\r\n\r\n//   const events = {\r\n//     '01-11-2021': [\r\n//         {\r\n//         id: 1,\r\n//         startAt: '2021-11-21T18:00:00.000Z',\r\n//         endAt: '2021-11-21T19:00:00.000Z',\r\n//         summary: 'test',\r\n//         color: 'blue',\r\n//         }\r\n//     ],\r\n//     '21-11-2021': [\r\n//         {\r\n//         id: 2,\r\n//         startAt: '2021-11-21T18:00:00.000Z',\r\n//         endAt: '2021-11-21T19:00:00.000Z',\r\n//         summary: 'test',\r\n//         color: 'blue',\r\n//         }\r\n//     ]\r\n// }\r\n\r\n// const notify = () => toast(\"Don't you worry, don't you worry, child \\n See heaven's got a plan for you\", {\r\n//   icon: '🛩️',\r\n// });\r\n\r\n//   const [demoEvents, setDemoEvents] = useState(events);\r\n\r\n//   const onNewEventClick = (demoEvents) => {\r\n//     console.log(demoEvents);\r\n//   };\r\n\r\n//   const onShowMoreMonthClick = (demoEvents) => {\r\n//     console.log(demoEvents);\r\n//   };\r\n\r\n\r\n//   const onEventClick = (demoEvents) => {\r\n//     console.log(demoEvents);\r\n//     //modal for this\r\n//   };\r\n\r\n//   // const OnEventDragFinish = (\r\n//   //   updatedEvent,\r\n//   //   events\r\n//   // ) => {\r\n//   //   console.log(events, updatedEvent);\r\n\r\n//   // };\r\n\r\n//   return (\r\n//     <>\r\n//       <Toaster\r\n//         position=\"top-center\"\r\n//         reverseOrder={false}\r\n//       />\r\n//       <Kalend\r\n//         onNewEventClick={onNewEventClick}\r\n//         initialView={CalendarView.WEEK}\r\n//         disabledViews={[]}\r\n//         onEventClick={onEventClick}\r\n//         events={demoEvents}\r\n//         initialDate={new Date().toISOString()}\r\n//         hourHeight={60}\r\n//         showMoreMonth={onShowMoreMonthClick}\r\n//         timezone={'Europe/Berlin'}\r\n//         // onEventDragFinish={onEventDragFinish}\r\n//       />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n\r\n// export default CalendComponent;\r\n\r\n\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport * as React from 'react';\r\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject, Resize, DragAndDrop } from '@syncfusion/ej2-react-schedule';\r\nimport { applyCategoryColor } from './Helper';\r\n\r\nimport { extend } from '@syncfusion/ej2-base';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport { SampleBase } from './Sample-base';\r\nimport { PropertyPane } from './Property-pane';\r\n// import * as dataSource from './datasource.json';\r\n/**\r\n * Schedule events sample\r\n */\r\nexport default class Events extends SampleBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = extend([], dataSource.scheduleData, null, true);\r\n    }\r\n    onEventRendered(args) {\r\n        applyCategoryColor(args, this.scheduleObj.currentView);\r\n    }\r\n    onClear() {\r\n        document.getElementById('EventLog').innerHTML = '';\r\n    }\r\n    onCreate() {\r\n        this.appendElement('Schedule <b>Load</b> event is triggered<hr>');\r\n    }\r\n    onActionBegin() {\r\n        this.appendElement('Schedule <b>Action Begin</b> event is triggered<hr>');\r\n    }\r\n    onActionComplete() {\r\n        this.appendElement('Schedule <b>Action Complete</b> event is triggered<hr>');\r\n    }\r\n    onActionFailure() {\r\n        this.appendElement('Schedule <b>Action Failure</b> event is triggered<hr>');\r\n    }\r\n    onCellDoubleClick() {\r\n        this.appendElement('SChedule <b>Cell Double Click</b> event is triggered<hr>');\r\n    }\r\n    onCellClick() {\r\n        this.appendElement('Schedule <b>Cell Click</b> event is triggered<hr>');\r\n    }\r\n    onNavigating() {\r\n        this.appendElement('Schedule <b>Navigating</b> event is triggered<hr>');\r\n    }\r\n    onDestroyed() {\r\n        this.appendElement('Schedule <b>Destroyed</b> event is triggered<hr>');\r\n    }\r\n    onEventClick() {\r\n        this.appendElement('Schedule <b>Event Click</b> event is triggered<hr>');\r\n    }\r\n    onPopupOpen() {\r\n        this.appendElement('Schedule <b>Popup Open</b> event is triggered<hr>');\r\n    }\r\n    appendElement(html) {\r\n        let span = document.createElement('span');\r\n        span.innerHTML = html;\r\n        let log = document.getElementById('EventLog');\r\n        log.insertBefore(span, log.firstChild);\r\n    }\r\n    render() {\r\n        return (<div className='schedule-control-section'>\r\n        <div className='col-lg-9 control-section'>\r\n          <div className='control-wrapper'>\r\n            <ScheduleComponent ref={schedule => this.scheduleObj = schedule} width='100%' height='650px' selectedDate={new Date(2021, 0, 10)} eventSettings={{ dataSource: this.data }} created={this.onCreate.bind(this)} eventRendered={this.onEventRendered.bind(this)} actionBegin={this.onActionBegin.bind(this)} actionComplete={this.onActionComplete.bind(this)} actionFailure={this.onActionFailure.bind(this)} cellClick={this.onCellClick.bind(this)} cellDoubleClick={this.onCellDoubleClick.bind(this)} destroyed={this.onDestroyed.bind(this)} navigating={this.onNavigating.bind(this)} eventClick={this.onEventClick.bind(this)} popupOpen={this.onPopupOpen.bind(this)}>\r\n              <Inject services={[Day, Week, WorkWeek, Month, Agenda, Resize, DragAndDrop]}/>\r\n            </ScheduleComponent>\r\n          </div>\r\n        </div>\r\n        <div className='col-lg-3 property-section'>\r\n          <PropertyPane title='Event Trace'>\r\n            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>\r\n              <tbody>\r\n                <tr style={{ height: '250px' }}>\r\n                  <td>\r\n                    <div className='eventarea' style={{ height: '245px', overflow: 'auto' }}>\r\n                      <span className='EventLog' id='EventLog' style={{ wordBreak: 'normal' }}></span>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{ height: '50px' }}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div className='evtbtn' style={{ paddingBottom: '10px' }}>\r\n                      <ButtonComponent title='Clear' onClick={this.onClear.bind(this)}>Clear</ButtonComponent>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </PropertyPane>\r\n        </div>\r\n      </div>);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\Dashboard.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchData } from \"../actions/weatherStation\"; // @connect((store) => {\n//   return {\n//     status: store.weatherStation.status\n//   }\n// })\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Dashboard extends Component {\n  constructor() {\n    super(...arguments);\n\n    this._updateCity = () => {\n      const city = this.__cityInput.value;\n      city.length !== 0 ? this.props.dispatch(fetchData(city)) : null;\n    };\n\n    this._onkeyPress = e => {\n      e.key === \"Enter\" ? this._updateCity() : null;\n    };\n  }\n\n  render() {\n    const {\n      city,\n      status\n    } = this.props;\n    const wrapperClass = status === \"failed\" ? \"weather-dashboard invalid-city\" : \"weather-dashboard\";\n\n    const fetchData = region => dispatch => {\n      const {\n        latitude,\n        longitude\n      } = region || {};\n      const getDataByCity = `https://api.openweathermap.org/data/2.5/forecast?q=${region}&units=metric&appid=${APP_ID}`;\n      const getDataByCoords = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${APP_ID}`;\n      let location = typeof region === \"object\" ? getDataByCoords : getDataByCity;\n      return axios.get(location).then(response => {\n        dispatch({\n          type: FETCH_DATA_FULFILLED,\n          payload: response.data\n        });\n      }).catch(err => {\n        dispatch({\n          type: FETCH_DATA_REJECTED,\n          payload: err\n        }); // Error handling\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: wrapperClass,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading\",\n          children: \"5-Day Weather Forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"controls\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"city-input\",\n            id: \"city-name\",\n            ref: input => {\n              this.__cityInput = input;\n              return this.__cityInput;\n            },\n            onKeyPress: this._onkeyPress,\n            placeholder: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            value: \">\",\n            className: \"search\",\n            onClick: this._updateCity,\n            id: \"change-city-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: \"Please enter valid city name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/Dashboard.jsx"],"names":["React","Component","connect","fetchData","Dashboard","_updateCity","city","__cityInput","value","length","props","dispatch","_onkeyPress","e","key","render","status","wrapperClass","region","latitude","longitude","getDataByCity","APP_ID","getDataByCoords","location","axios","get","then","response","type","FETCH_DATA_FULFILLED","payload","data","catch","err","FETCH_DATA_REJECTED","input"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchData } from \"../actions/weatherStation\";\r\n\r\n// @connect((store) => {\r\n//   return {\r\n//     status: store.weatherStation.status\r\n//   }\r\n// })\r\n\r\n\r\nexport default class Dashboard extends Component {\r\n\r\n\r\n  _updateCity = () => {\r\n    const city = this.__cityInput.value;\r\n    city.length !== 0 ? this.props.dispatch(fetchData(city)) : null;\r\n  }\r\n\r\n  _onkeyPress = e => {\r\n    e.key === \"Enter\" ? this._updateCity() : null\r\n  }\r\n\r\n  render() {\r\n\r\n    const { city, status } = this.props;\r\n    const wrapperClass = (status === \"failed\") ? \"weather-dashboard invalid-city\" : \"weather-dashboard\";\r\nconst fetchData = (region) => (dispatch) => {\r\n  const { latitude, longitude } = region || {};\r\n\r\n  const getDataByCity = `https://api.openweathermap.org/data/2.5/forecast?q=${region}&units=metric&appid=${APP_ID}`;\r\n  const getDataByCoords = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${APP_ID}`;\r\n\r\n  let location = typeof(region) === \"object\" ? getDataByCoords : getDataByCity;\r\n\r\n  return axios.get(location)\r\n    .then((response) => {\r\n      dispatch({type: FETCH_DATA_FULFILLED, payload: response.data});\r\n    })\r\n    .catch((err) => {\r\n      dispatch({type: FETCH_DATA_REJECTED, payload: err}); // Error handling\r\n    });\r\n};\r\n    return (\r\n      <div className={wrapperClass}>\r\n        <header>\r\n          <h1 className=\"heading\">5-Day Weather Forecast</h1>\r\n        </header>\r\n        <section className=\"controls\">\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"city-input\"\r\n              id=\"city-name\"\r\n              ref={input => {\r\n                this.__cityInput = input;\r\n                return this.__cityInput;\r\n              }}\r\n              onKeyPress={this._onkeyPress}\r\n              placeholder={city}\r\n            />\r\n            <input\r\n              type=\"button\"\r\n              value=\"&gt;\"\r\n              className=\"search\"\r\n              onClick={this._updateCity}\r\n              id=\"change-city-btn\"\r\n            />\r\n          </div>\r\n        </section>\r\n        <span className=\"error\">Please enter valid city name!</span>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
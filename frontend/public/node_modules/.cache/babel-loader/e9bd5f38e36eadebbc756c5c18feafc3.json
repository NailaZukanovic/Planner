{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    color,\n    classNames,\n    styles,\n    size,\n    labelTransition,\n    labelTransitionDuration,\n    labelTransitionTimingFunction,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    children = null\n  } = _ref;\n  const {\n    classes,\n    cx,\n    theme\n  } = useStyles({\n    color,\n    size\n  }, {\n    classNames,\n    styles,\n    name: \"Slider\"\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n  return /* @__PURE__ */React.createElement(\"div\", {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onClick: event => event.stopPropagation(),\n    style: {\n      left: `${position}%`\n    }\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"sources":["../../../../src/components/Slider/Thumb/Thumb.tsx"],"names":[],"mappings":";;;AAGY,MAAC,KAAK,GAAG,UAAU,CAAC,OAqB7B,GArB6B,KAqBrB;AAAA,MArBsB;AAC/B,IAAA,GAD+B;AAE/B,IAAA,GAF+B;AAG/B,IAAA,KAH+B;AAI/B,IAAA,QAJ+B;AAK/B,IAAA,KAL+B;AAM/B,IAAA,QAN+B;AAO/B,IAAA,WAP+B;AAQ/B,IAAA,KAR+B;AAS/B,IAAA,UAT+B;AAU/B,IAAA,MAV+B;AAW/B,IAAA,IAX+B;AAY/B,IAAA,eAZ+B;AAa/B,IAAA,uBAb+B;AAc/B,IAAA,6BAd+B;AAe/B,IAAA,aAf+B;AAgB/B,IAAA,UAhB+B;AAiB/B,IAAA,OAjB+B;AAkB/B,IAAA,MAlB+B;AAmB/B,IAAA,gBAnB+B;AAoB/B,IAAA,QAAQ,GAAG;AApBoB,GAqBtB;AACT,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA,EAAX;AAAe,IAAA;AAAf,MAAyB,SAAS,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA;AAAT,GAAD,EAAkB;AAAE,IAAA,UAAF;AAAc,IAAA,MAAd;AAAsB,IAAA,IAAI,EAAE;AAA5B,GAAlB,CAAxC;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,SAAS,GAAG,aAAa,IAAI,QAAjB,IAA6B,OAA7B,IAAwC,gBAA1D;AACA,SAAA,eAAuB,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAChD,IAAA,QAAQ,EAAE,CADsC;AAEhD,IAAA,IAAI,EAAE,QAF0C;AAGhD,kBAAc,UAHkC;AAIhD,qBAAiB,GAJ+B;AAKhD,qBAAiB,GAL+B;AAMhD,qBAAiB,KAN+B;AAOhD,IAAA,GAPgD;AAQhD,IAAA,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAT,EAAgB;AAAE,OAAC,OAAO,CAAC,QAAT,GAAoB;AAAtB,KAAhB,CARmC;AAShD,IAAA,OAAO,EAAE,MAAM;AACb,MAAA,UAAU,CAAC,IAAD,CAAV;AACA,aAAO,OAAP,KAAmB,UAAnB,IAAiC,OAAO,EAAxC;AACD,KAZ+C;AAahD,IAAA,MAAM,EAAE,MAAM;AACZ,MAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAO,MAAP,KAAkB,UAAlB,IAAgC,MAAM,EAAtC;AACD,KAhB+C;AAiBhD,IAAA,YAAY,EAAE,WAjBkC;AAkBhD,IAAA,WAlBgD;AAmBhD,IAAA,OAAO,EAAG,KAAD,IAAW,KAAK,CAAC,eAAN,EAnB4B;AAoBhD,IAAA,KAAK,EAAE;AAAE,MAAA,IAAI,EAAG,GAAE,QAAS;AAApB;AApByC,GAA3B,EAqBpB,QArBoB,EAqBZ,eAAkB,KAAK,CAAC,aAAN,CAAoB,UAApB,EAAgC;AAC3D,IAAA,OAAO,EAAE,KAAK,IAAI,IAAT,IAAiB,SADiC;AAE3D,IAAA,QAAQ,EAAE,uBAFiD;AAG3D,IAAA,UAAU,EAAE,eAH+C;AAI3D,IAAA,cAAc,EAAE,6BAA6B,IAAI,KAAK,CAAC;AAJI,GAAhC,EAKzB,gBAAD,IAAiB,eAAqB,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAClE,IAAA,KAAK,EAAE,gBAD2D;AAElE,IAAA,SAAS,EAAE,OAAO,CAAC;AAF+C,GAA3B,EAGtC,KAHsC,CALZ,CArBN,CAAvB;AA8BD,CAvD8B,CAAnB;AAwDZ,KAAK,CAAC,WAAN,GAAoB,2BAApB","sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { DefaultProps, MantineNumberSize, MantineColor, ClassNames } from '@mantine/styles';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = ClassNames<typeof useStyles>;\n\ninterface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onMouseDown(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      children = null,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { classes, cx, theme } = useStyles(\n      { color, size },\n      { classNames, styles, name: 'Slider' }\n    );\n    const [focused, setFocused] = useState(false);\n    const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n      <div\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onClick={(event) => event.stopPropagation()}\n        style={{ left: `${position}%` }}\n      >\n        {children}\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </div>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module"}
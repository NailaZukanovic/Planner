{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naila\\\\Desktop\\\\projekatSi\\\\frontend\\\\src\\\\Components\\\\pages\\\\Notes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Container } from '@material-ui/core';\nimport NoteCard from './component_note/NoteCard.js';\nimport { makeStyles } from '@material-ui/core';\nimport SearchBar from \"material-ui-search-bar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nconst useStyles = makeStyles({\n  page: {\n    background: '#f9f9f9',\n    width: '100%',\n    padding: 20\n  },\n  field: {\n    marginTop: 20,\n    marginBotton: 20,\n    display: 'block'\n  }\n});\nexport default function Notes() {\n  _s();\n\n  const classes = useStyles();\n  const [notes, setNotes] = useState([]); //     set search query to empty string\n\n  const [q, setQ] = useState(\"\"); //     set search parameters\n  //     we only what to search countries by capital and name\n  //     this list can be longer if you want\n  //     you can search countries even by their population\n  // just add it to this array\n\n  const [searchParam] = useState([\"category\"]);\n\n  const search = items => {\n    return items.filter(item => {\n      return searchParam.some(newItem => {\n        return item[newItem].toString().toLowerCase().indexOf(q.toLowerCase()) > -1;\n      });\n    });\n  };\n\n  useEffect(() => {\n    axios.get('http://localhost:4000/notes') // .then(res => res.json())\n    .then(data => {\n      setNotes(data.data.notes);\n      console.log(data);\n    });\n  }, []);\n\n  const handleDelete = async _id => {\n    console.log(_id);\n    await fetch('http://localhost:4000/notes/' + _id, {\n      method: 'DELETE'\n    });\n    console.log(notes);\n    const newNotes = notes.filter(note => note._id != _id);\n    setNotes(newNotes);\n  };\n\n  const handleUpdate = _id => {\n    console.log(_id);\n  }; //xs={12}  lg={4}\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.page,\n    children: [\" */}\", /*#__PURE__*/_jsxDEV(SearchBar, {\n      value: searched,\n      onChange: searchVal => requestSearch(searchVal),\n      onCancelSearch: () => cancelSearch()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: search(notes).map(note => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(NoteCard, {\n          note: note,\n          handleDelete: () => handleDelete(note._id),\n          handleUpdate: handleUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Notes, \"ytiEvsYhHzwrzyrnhNfP2xkCD1Q=\", false, function () {\n  return [useStyles];\n});\n\n_c = Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["C:/Users/Naila/Desktop/projekatSi/frontend/src/Components/pages/Notes.js"],"names":["React","useEffect","useState","Grid","Paper","Container","NoteCard","makeStyles","SearchBar","axios","require","useStyles","page","background","width","padding","field","marginTop","marginBotton","display","Notes","classes","notes","setNotes","q","setQ","searchParam","search","items","filter","item","some","newItem","toString","toLowerCase","indexOf","get","then","data","console","log","handleDelete","_id","fetch","method","newNotes","note","handleUpdate","searched","searchVal","requestSearch","cancelSearch","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Container } from '@material-ui/core';\r\nimport NoteCard from './component_note/NoteCard.js';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport SearchBar from \"material-ui-search-bar\";\r\n\r\nconst axios = require('axios');\r\n\r\nconst useStyles = makeStyles({\r\n    page: \r\n    {\r\n      background: '#f9f9f9',\r\n      width: '100%',\r\n      padding:20 \r\n    },\r\n    \r\n    field: {\r\n      marginTop: 20,\r\n      marginBotton: 20,\r\n      display: 'block'\r\n    }\r\n});\r\n  \r\n  \r\nexport default function Notes() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [notes, setNotes] = useState([]);\r\n\r\n     //     set search query to empty string\r\n     const [q, setQ] = useState(\"\");\r\n     //     set search parameters\r\n     //     we only what to search countries by capital and name\r\n     //     this list can be longer if you want\r\n     //     you can search countries even by their population\r\n     // just add it to this array\r\n     const [searchParam] = useState([\"category\"]);\r\n\r\n\r\n     const search = (items) => {\r\n      return items.filter((item) => {\r\n        return searchParam.some((newItem) => {\r\n            return (\r\n                item[newItem]\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .indexOf(q.toLowerCase()) > -1\r\n              );\r\n          });\r\n      });\r\n    }\r\n  \r\n    useEffect(() => {\r\n      axios.get('http://localhost:4000/notes')\r\n        // .then(res => res.json())\r\n        .then(data => \r\n          { setNotes(data.data.notes);\r\n              console.log(data); }\r\n        )\r\n    }, [])\r\n  \r\n    const handleDelete = async (_id) => {\r\n      console.log(_id);\r\n\r\n      await fetch('http://localhost:4000/notes/' + _id, {\r\n        method: 'DELETE'\r\n      })\r\n\r\n      console.log(notes);\r\n\r\n      const newNotes = notes.filter(note => note._id != _id)\r\n      setNotes(newNotes)\r\n    }\r\n\r\n    const handleUpdate = (_id) => \r\n    {\r\n      console.log(_id);\r\n    }\r\n//xs={12}  lg={4}\r\n    return(\r\n      <Container className={classes.page}>\r\n                    {/* <div className=\"search-wrapper\">\r\n                        <label htmlFor=\"search-form\">\r\n                            <input\r\n                                type=\"search\"\r\n                                name=\"search-form\"\r\n                                id=\"search-form\"\r\n                                className=\"search-input\"\r\n                                placeholder=\"Search for...\"\r\n                                value={q}\r\n                                /*\r\n                                // set the value of our useState q\r\n                                //  anytime the user types in the search box\r\n                                */\r\n                             /*   onChange={(e) => setQ(e.target.value)}\r\n                            />\r\n                            {/* <span className=\"sr-only\">Search notes here</span> */}\r\n                      {/* /* </label> */ \r\n                    /*</div> */} */}\r\n                    <SearchBar\r\n                      value={searched}\r\n                      onChange={(searchVal) => requestSearch(searchVal)}\r\n                      onCancelSearch={() => cancelSearch()}\r\n                    />\r\n        <Grid container spacing={3}>\r\n          {search(notes).map(note => (\r\n            <Grid item xs={12} md={6} lg={4} key={note._id}>\r\n              <NoteCard note={note} handleDelete={() => handleDelete(note._id)} handleUpdate={handleUpdate}/>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createContext as e } from \"@radix-ui/react-context\";\nimport * as r from \"react\";\nimport o from \"@babel/runtime/helpers/esm/extends\";\nconst n = {\n  prefix: Math.round(1e10 * Math.random()),\n  current: 0\n},\n      [t, i] = e(\"IdProvider\", n);\nexport const IdProvider = e => {\n  const d = i(\"IdProvider\"),\n        a = d === n;\n  /*#__PURE__*/\n\n  return r.createElement(t, o({\n    prefix: a ? 0 : ++d.prefix,\n    current: 0\n  }, e));\n};\nexport function useId(e) {\n  const o = i(\"IdProviderConsumer\");\n  return Boolean(null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || o !== n || console.warn(\"When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.\"), r.useMemo(() => e || `radix-id-${o.prefix}-${++o.current}`, [e]);\n}","map":{"version":3,"sources":["packages/react/id/src/id.tsx"],"names":["defaultIdContext","prefix","Math","round","random","current","IdProviderImpl","useIdContext","createContext","IdProvider","props","currentContext","isRootIdProvider","_react","$ae65c4aca36d67ac05042d6e17501$var$IdProviderImpl","useId","deterministicId","context","Boolean","globalThis","document","console","warn","React","useMemo"],"mappings":";;;AAMA,MAEMA,CAAAA,GAAmB;AACvBC,EAAAA,MAAAA,EAAQC,IAAAA,CAAKC,KAALD,CAA2B,OAAhBA,IAAAA,CAAKE,MAALF,EAAXA,CADe;AAEvBG,EAAAA,OAAAA,EAAS;AAFc,CAFzB;AAAA,MAIW,CAGJC,CAHI,EAGYC,CAHZ,IAG4BC,CAAAA,CAPjB,YAOiBA,EAA6BR,CAA7BQ,CAPvC;AAOoER,OAEpE,MAAMS,UAAAA,GAAuDC,CAAAA,IAAAA;AAC3D,QAAMC,CAAAA,GAAiBJ,CAAAA,CAVH,YAUGA,CAAvB;AAAA,QACMK,CAAAA,GAAmBD,CAAAA,KAAmBX,CAD5C;AAC4CA;;AAC5C,SACEa,CAAAA,CAAAA,aAAAA,CAACC,CAADD,EAAAA,CAAAA,CAAAA;AACEZ,IAAAA,MAAAA,EAAQW,CAAAA,GAAmB,CAAnBA,GAAmB,EAAMD,CAAAA,CAAeV,MADlDY;AAEER,IAAAA,OAAAA,EAAS;AAFXQ,GAAAA,EAGMH,CAHNG,CAAAA,CADF;AAIQH,CAPV;AAOUA,OAKV,SAASK,KAAT,CAAeC,CAAf,EAAeA;AACb,QAAMC,CAAAA,GAAUV,CAAAA,CAAa,oBAAbA,CAAhB;AASA,SARkBW,OAAAA,CAAO,SAACC,UAAD,IAACA,KAAD,CAACA,KAAAA,UAAD,GAACA,KAAD,CAAA,GAACA,UAAAA,CAAYC,QAApBF,CAAAA,IAEAD,CAAAA,KAAYjB,CAFZkB,IAGhBG,OAAAA,CAAQC,IAARD,CACE,gJADFA,CAHgBH,EAQXK,CAAAA,CAAMC,OAAND,CACL,MAAMP,CAAAA,IAAoB,YAAWC,CAAAA,CAAQhB,MAAAA,IAAAA,EAAYgB,CAAAA,CAAQZ,OAAAA,EAD5DkB,EAGL,CAACP,CAAD,CAHKO,CAAP;AAGGP","sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n// See: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/ssr/src/SSRProvider.tsx\n\nimport * as React from 'react';\nimport { createContext } from '@radix-ui/react-context';\n\nconst PROVIDER_NAME = 'IdProvider';\n\nconst defaultIdContext = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n};\n\nconst [IdProviderImpl, useIdContext] = createContext(PROVIDER_NAME, defaultIdContext);\n\nconst IdProvider: React.FC<{ children: React.ReactNode }> = (props) => {\n  const currentContext = useIdContext(PROVIDER_NAME);\n  const isRootIdProvider = currentContext === defaultIdContext;\n  return (\n    <IdProviderImpl\n      prefix={isRootIdProvider ? 0 : ++currentContext.prefix}\n      current={0}\n      {...props}\n    />\n  );\n};\n\nfunction useId(deterministicId?: string): string {\n  const context = useIdContext('IdProviderConsumer');\n  const isBrowser = Boolean(globalThis?.document);\n\n  if (!isBrowser && context === defaultIdContext) {\n    console.warn(\n      'When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.'\n    );\n  }\n\n  return React.useMemo(\n    () => deterministicId || `radix-id-${context.prefix}-${++context.current}`,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deterministicId]\n  );\n}\n\nexport { IdProvider, useId };\n"]},"metadata":{},"sourceType":"module"}
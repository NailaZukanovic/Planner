var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment, useState } from "react";
import { Popover, Typography, ButtonBase, useTheme, IconButton, Button, Slide, Paper, } from "@mui/material";
import { format } from "date-fns";
import { useAppState } from "../../hooks/useAppState";
import ArrowRightRoundedIcon from "@mui/icons-material/ArrowRightRounded";
import ArrowLeftRoundedIcon from "@mui/icons-material/ArrowLeftRounded";
import EditRoundedIcon from "@mui/icons-material/EditRounded";
import DeleteRoundedIcon from "@mui/icons-material/DeleteRounded";
import EventNoteRoundedIcon from "@mui/icons-material/EventNoteRounded";
import ClearRoundedIcon from "@mui/icons-material/ClearRounded";
import SupervisorAccountRoundedIcon from "@mui/icons-material/SupervisorAccountRounded";
import { PopperInner } from "../../styles/styles";
const EventItem = ({ event, multiday, hasPrev, hasNext, showdate, }) => {
    const { triggerDialog, onDelete, events, handleState, triggerLoading, viewerExtraComponent, fields, direction, resources, resourceFields, locale, viewerTitleComponent, } = useAppState();
    const [anchorEl, setAnchorEl] = useState(null);
    const [deleteConfirm, setDeleteConfirm] = useState(false);
    const theme = useTheme();
    const NextArrow = direction === "rtl" ? ArrowLeftRoundedIcon : ArrowRightRoundedIcon;
    const PrevArrow = direction === "rtl" ? ArrowRightRoundedIcon : ArrowLeftRoundedIcon;
    const triggerViewer = (el) => {
        if (!el && deleteConfirm) {
            setDeleteConfirm(false);
        }
        setAnchorEl(el || null);
    };
    const handleConfirmDelete = () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            triggerLoading(true);
            let deletedId = event.event_id;
            // Trigger custom/remote when provided
            if (onDelete) {
                const remoteId = yield onDelete(deletedId);
                if (remoteId) {
                    deletedId = remoteId;
                }
                else {
                    deletedId = "";
                }
            }
            if (deletedId) {
                const updatedEvents = events.filter((e) => e.event_id !== deletedId);
                handleState(updatedEvents, "events");
                triggerViewer();
            }
        }
        catch (error) {
            console.error(error);
        }
        finally {
            triggerLoading(false);
        }
    });
    let item = (_jsxs("div", Object.assign({ style: { padding: 2 } }, { children: [_jsx(Typography, Object.assign({ variant: "subtitle2", style: { fontSize: 12 }, noWrap: true }, { children: event.title }), void 0),
            showdate && (_jsx(Typography, Object.assign({ style: { fontSize: 11 }, noWrap: true }, { children: `${format(event.start, "hh:mm a", {
                    locale: locale,
                })} - ${format(event.end, "hh:mm a", { locale: locale })}` }), void 0))] }), void 0));
    if (multiday) {
        item = (_jsxs("div", Object.assign({ style: {
                padding: 2,
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
            } }, { children: [_jsx(Typography, Object.assign({ sx: { fontSize: 11 }, noWrap: true }, { children: hasPrev ? (_jsx(PrevArrow, { fontSize: "small", sx: { display: "flex" } }, void 0)) : (showdate && format(event.start, "hh:mm a", { locale: locale })) }), void 0),
                _jsx(Typography, Object.assign({ variant: "subtitle2", align: "center", sx: { fontSize: 12 }, noWrap: true }, { children: event.title }), void 0),
                _jsx(Typography, Object.assign({ sx: { fontSize: 11 }, noWrap: true }, { children: hasNext ? (_jsx(NextArrow, { fontSize: "small", sx: { display: "flex" } }, void 0)) : (showdate && format(event.end, "hh:mm a", { locale: locale })) }), void 0)] }), void 0));
    }
    const renderViewer = () => {
        const idKey = resourceFields.idField;
        const hasResource = resources.filter((res) => Array.isArray(event[idKey])
            ? event[idKey].includes(res[idKey])
            : res[idKey] === event[idKey]);
        return (_jsxs(PopperInner, { children: [_jsxs("div", Object.assign({ style: {
                        background: event.color || theme.palette.primary.main,
                        color: theme.palette.primary.contrastText,
                    } }, { children: [_jsxs("div", Object.assign({ className: "rs__popper_actions" }, { children: [_jsx("div", { children: _jsx(IconButton, Object.assign({ size: "small", style: { color: theme.palette.primary.contrastText }, onClick: () => {
                                            triggerViewer();
                                        } }, { children: _jsx(ClearRoundedIcon, { color: "disabled" }, void 0) }), void 0) }, void 0),
                                _jsxs("div", Object.assign({ style: { display: "inherit" } }, { children: [_jsx(IconButton, Object.assign({ size: "small", style: { color: theme.palette.primary.contrastText }, onClick: () => {
                                                triggerViewer();
                                                triggerDialog(true, event);
                                            } }, { children: _jsx(EditRoundedIcon, {}, void 0) }), void 0),
                                        !deleteConfirm && (_jsx(IconButton, Object.assign({ size: "small", style: { color: theme.palette.primary.contrastText }, onClick: () => setDeleteConfirm(true) }, { children: _jsx(DeleteRoundedIcon, {}, void 0) }), void 0)),
                                        _jsx(Slide, Object.assign({ in: deleteConfirm, direction: direction === "rtl" ? "right" : "left", mountOnEnter: true, unmountOnExit: true }, { children: _jsxs("div", { children: [_jsx(Button, Object.assign({ style: { color: theme.palette.error.main }, size: "small", onClick: handleConfirmDelete }, { children: "DELETE" }), void 0),
                                                    _jsx(Button, Object.assign({ style: { color: theme.palette.action.disabled }, size: "small", onClick: () => setDeleteConfirm(false) }, { children: "CANCEL" }), void 0)] }, void 0) }), void 0)] }), void 0)] }), void 0),
                        viewerTitleComponent instanceof Function ? (viewerTitleComponent(event)) : (_jsx(Typography, Object.assign({ style: { padding: "5px 0" }, noWrap: true }, { children: event.title }), void 0))] }), void 0),
                _jsxs("div", Object.assign({ style: { padding: "5px 10px" } }, { children: [_jsxs(Typography, Object.assign({ style: { display: "flex", alignItems: "center" }, color: "textSecondary", variant: "caption", noWrap: true }, { children: [_jsx(EventNoteRoundedIcon, {}, void 0), " ", `${format(event.start, "dd MMMM yyyy hh:mm a", {
                                    locale: locale,
                                })} - ${format(event.end, "dd MMMM yyyy hh:mm a", {
                                    locale: locale,
                                })}`] }), void 0),
                        hasResource.length > 0 && (_jsxs(Typography, Object.assign({ style: { display: "flex", alignItems: "center" }, color: "textSecondary", variant: "caption", noWrap: true }, { children: [_jsx(SupervisorAccountRoundedIcon, {}, void 0), " ", hasResource
                                    .map((res) => res[resourceFields.textField])
                                    .join(", ")] }), void 0)), viewerExtraComponent instanceof Function
                            ? viewerExtraComponent(fields, event)
                            : viewerExtraComponent] }), void 0)] }, void 0));
    };
    return (_jsxs(Fragment, { children: [_jsx(Paper, Object.assign({ style: {
                    width: "100%",
                    height: "100%",
                    display: "block",
                    background: event.disabled
                        ? "#d0d0d0"
                        : event.color || theme.palette.primary.main,
                    color: event.disabled
                        ? "#808080"
                        : theme.palette.primary.contrastText,
                    cursor: event.disabled ? "not-allowed" : "pointer",
                    overflow: "hidden",
                } }, { children: _jsx(ButtonBase, Object.assign({ onClick: (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        triggerViewer(e.currentTarget);
                    }, disabled: event.disabled, style: {
                        width: "100%",
                        height: "100%",
                        display: "block",
                    } }, { children: _jsx("div", Object.assign({ style: {
                            height: "100%",
                        }, draggable: true, onDragStart: (e) => {
                            e.stopPropagation();
                            e.dataTransfer.setData("text/plain", `${event.event_id}`);
                            e.currentTarget.style.backgroundColor = theme.palette.error.main;
                        }, onDragEnd: (e) => {
                            e.currentTarget.style.backgroundColor =
                                event.color || theme.palette.primary.main;
                        }, onDragOver: (e) => {
                            e.stopPropagation();
                            e.preventDefault();
                        }, onDragEnter: (e) => {
                            e.stopPropagation();
                            e.preventDefault();
                        } }, { children: item }), void 0) }), void 0) }), void 0),
            _jsx(Popover, Object.assign({ open: Boolean(anchorEl), anchorEl: anchorEl, onClose: (e) => {
                    triggerViewer();
                }, anchorOrigin: {
                    vertical: "center",
                    horizontal: "center",
                }, transformOrigin: {
                    vertical: "top",
                    horizontal: "center",
                }, onClick: (e) => {
                    e.stopPropagation();
                } }, { children: renderViewer() }), void 0)] }, void 0));
};
EventItem.defaultProps = {
    multiday: false,
    showdate: true,
};
export default EventItem;

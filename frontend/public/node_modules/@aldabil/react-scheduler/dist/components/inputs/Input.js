import { jsx as _jsx } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { TextField, Typography } from "@mui/material";
const EditorInput = ({ variant, label, placeholder, value, name, required, min, max, email, decimal, onChange, disabled, multiline, rows, touched, }) => {
    const [state, setState] = useState({
        touched: false,
        valid: false,
        errorMsg: "",
    });
    useEffect(() => {
        if (touched) {
            handleChange(value);
        }
        // eslint-disable-next-line
    }, [touched]);
    const handleChange = (value) => {
        let val = value;
        let isValid = true;
        let errorMsg = "";
        if (email) {
            const reg = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            isValid = reg.test(val) && isValid;
            errorMsg = "Invalid Email";
        }
        if (decimal) {
            const reg = /^[0-9]+(\.[0-9]*)?$/;
            isValid = reg.test(val) && isValid;
            errorMsg = "Only Numbers Allowed";
        }
        if (min && `${val}`.trim().length < min) {
            isValid = false;
            errorMsg = `Minimum ${min} letters`;
        }
        if (max && `${val}`.trim().length > max) {
            isValid = false;
            errorMsg = `Maximum ${max} letters`;
        }
        if (required && `${val}`.trim().length <= 0) {
            isValid = false;
            errorMsg = "Required";
        }
        setState({ touched: true, valid: isValid, errorMsg: errorMsg });
        onChange(name, val, isValid);
    };
    return (_jsx(TextField, { variant: variant, label: label && (_jsx(Typography, Object.assign({ variant: "body2" }, { children: `${label} ${required ? "*" : ""}` }), void 0)), value: value, name: name, onChange: (e) => handleChange(e.target.value), disabled: disabled, error: state.touched && !state.valid, helperText: state.touched && !state.valid && state.errorMsg, multiline: multiline, rows: rows, style: { width: "100%" }, InputProps: {
            placeholder: placeholder || "",
        } }, void 0));
};
EditorInput.defaultProps = {
    variant: "outlined",
};
export { EditorInput };

import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { FormControl, FormHelperText, MenuItem, Checkbox, useTheme, Chip, Typography, CircularProgress, InputLabel, Select, } from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
const EditorSelect = ({ options, value, name, required, onChange, label, disabled, touched, variant, loading, multiple, placeholder, errMsg, }) => {
    const theme = useTheme();
    const [state, setState] = useState({
        touched: false,
        valid: !!value,
        errorMsg: errMsg ? errMsg : required ? "Required" : undefined,
    });
    useEffect(() => {
        if (touched) {
            handleChange(value);
        }
        // eslint-disable-next-line
    }, [touched]);
    const handleTouched = () => {
        if (!state.touched) {
            setState((prev) => {
                return Object.assign(Object.assign({}, prev), { touched: true, errorMsg: errMsg || prev.errorMsg });
            });
        }
    };
    const handleChange = (value) => {
        let val = value;
        let isValid = true;
        let errorMsg = errMsg;
        if (required && (multiple ? !val.length : !val)) {
            isValid = false;
            errorMsg = "Required";
        }
        setState((prev) => {
            return Object.assign(Object.assign({}, prev), { touched: true, valid: isValid, errorMsg: errorMsg });
        });
        onChange(name, val, isValid);
    };
    return (_jsxs(_Fragment, { children: [_jsxs(FormControl, Object.assign({ variant: variant || "outlined", fullWidth: true, error: required && state.touched && !state.valid, 
                // style={{ minWidth: 230 }}
                disabled: disabled }, { children: [label && (_jsx(InputLabel, Object.assign({ id: `input_${name}` }, { children: _jsx(Typography, Object.assign({ variant: "body2" }, { children: `${label} ${required ? "*" : ""}` }), void 0) }), void 0)),
                    _jsxs(Select, Object.assign({ label: label, labelId: `input_${name}`, value: value, onBlur: handleTouched, onChange: (e) => handleChange(e.target.value), IconComponent: loading ? () => _jsx(CircularProgress, { size: 5 }, void 0) : ExpandMoreIcon, multiple: !!multiple, classes: {
                            select: multiple === "chips" ? "flex__wrap" : undefined,
                        }, renderValue: (selected) => {
                            if (!selected || selected.length === 0) {
                                return _jsx("em", { children: label }, void 0);
                            }
                            let text = [];
                            if (multiple) {
                                for (const opt of options) {
                                    if (selected.includes(opt.value)) {
                                        text.push([opt.text]);
                                    }
                                }
                                if (multiple === "chips") {
                                    return text.map((t, i) => (_jsx(Chip, { label: t, style: { margin: "0 2px" }, color: "primary" }, `${t}_${i}`)));
                                }
                                else {
                                    return text.join(",");
                                }
                            }
                            else {
                                for (const opt of options) {
                                    if (selected === opt.value)
                                        text.push([opt.text]);
                                }
                                return text.join(",");
                            }
                        } }, { children: [placeholder && (_jsx(MenuItem, Object.assign({ value: "" }, { children: _jsx("em", { children: placeholder }, void 0) }), void 0)),
                            options.map((op) => (_jsxs(MenuItem, Object.assign({ value: op.value }, { children: [multiple && (_jsx(Checkbox, { checked: value.indexOf(op.value) > -1, color: "primary" }, void 0)), op.text] }), op.id || op.value)))] }), void 0)] }), void 0),
            _jsx(FormHelperText, Object.assign({ style: { color: theme.palette.error.main } }, { children: state.touched && !state.valid && state.errorMsg }), void 0)] }, void 0));
};
EditorSelect.defaultProps = {
    variant: "outlined",
};
export { EditorSelect };

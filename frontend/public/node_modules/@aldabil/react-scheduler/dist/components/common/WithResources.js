import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useAppState } from "../../hooks/useAppState";
import { ResourceHeader } from "./ResourceHeader";
import { ButtonTabs } from "./Tabs";
const WithResources = ({ renderChildren }) => {
    const { resourceViewMode } = useAppState();
    if (resourceViewMode === "tabs") {
        return _jsx(ResourcesTabTables, { renderChildren: renderChildren }, void 0);
    }
    else {
        return _jsx(ResourcesTables, { renderChildren: renderChildren }, void 0);
    }
};
const ResourcesTables = ({ renderChildren }) => {
    const { resources, resourceFields } = useAppState();
    return (_jsx(_Fragment, { children: resources.map((res, i) => (_jsxs("div", { children: [_jsx(ResourceHeader, { resource: res }, void 0), renderChildren(res)] }, `${res[resourceFields.idField]}_${i}`))) }, void 0));
};
const ResourcesTabTables = ({ renderChildren }) => {
    const { resources, resourceFields, selectedResource, handleState } = useAppState();
    const tabs = resources.map((res) => {
        return {
            id: res[resourceFields.idField],
            label: _jsx(ResourceHeader, { resource: res }, void 0),
            component: _jsx(_Fragment, { children: renderChildren(res) }, void 0),
        };
    });
    const setTab = (tab) => {
        handleState(tab, "selectedResource");
    };
    return (_jsx(ButtonTabs, { tabs: tabs, tab: selectedResource || resources[0][resourceFields.idField], setTab: setTab, style: { display: "grid" } }, void 0));
};
WithResources.defaultProps = {
    span: 1,
};
export { WithResources };

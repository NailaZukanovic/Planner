var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useReducer } from "react";
import { arraytizeFieldVal, getAvailableViews, getOneView, } from "../../helpers/generals";
import { differenceInMinutes, addMinutes, isEqual } from "date-fns";
import { defaultProps, StateContext, } from "./stateContext";
import { stateReducer } from "./stateReducer";
const initialState = (initial) => {
    const initialView = initial.view && initial[initial.view] ? initial.view : getOneView(initial);
    return Object.assign(Object.assign({}, initial), { view: initialView, dialog: false, mounted: false, selectedRange: undefined, fields: [...defaultProps.fields, ...(initial.fields || [])] });
};
const AppState = ({ initial, children }) => {
    const { events, resources, resourceViewMode, month, week, day, fields, locale, direction, loading, onEventDrop, } = initial;
    const [state, dispatch] = useReducer(stateReducer, initialState(initial));
    const handleState = (value, name) => {
        dispatch({ type: "set", payload: { name, value } });
    };
    const updateProps = (updatedProps) => {
        dispatch({ type: "updateProps", payload: updatedProps });
    };
    useEffect(() => {
        if (state.mounted) {
            updateProps({
                events,
                resources,
                resourceViewMode,
                month,
                week,
                day,
                fields,
                locale,
                direction,
                loading,
            });
        }
        else {
            handleState(true, "mounted");
        }
        //eslint-disable-next-line
    }, [
        events,
        resources,
        resourceViewMode,
        month,
        week,
        day,
        fields,
        locale,
        direction,
        loading,
    ]);
    const confirmEvent = (event, action) => {
        let updatedEvents;
        if (action === "edit") {
            updatedEvents = state.events.map((e) => e.event_id === event.event_id ? event : e);
        }
        else {
            updatedEvents = [...state.events, event];
        }
        handleState(updatedEvents, "events");
    };
    const getViews = () => getAvailableViews(state);
    const triggerDialog = (status, selected) => {
        dispatch({ type: "triggerDialog", payload: { status, selected } });
    };
    const triggerLoading = (status) => {
        // Trigger if not out-sourced by props
        if (typeof loading === "undefined") {
            dispatch({ type: "triggerLoading", payload: status });
        }
    };
    const handleGotoDay = (day) => {
        const views = getViews();
        if (views.includes("day")) {
            handleState("day", "view");
            handleState(day, "selectedDate");
        }
        else if (views.includes("week")) {
            handleState("week", "view");
            handleState(day, "selectedDate");
        }
        else {
            console.warn("No Day/Week views available");
        }
    };
    const onDrop = (eventId, startTime, resKey, resVal) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // Get dropped event
        const droppedEvent = state.events.find((e) => {
            if (typeof e.event_id === "number") {
                return e.event_id === +eventId;
            }
            return e.event_id === eventId;
        });
        // Check if has resource and if is multiple
        const resField = state.fields.find((f) => f.name === resKey);
        const isMultiple = !!((_a = resField === null || resField === void 0 ? void 0 : resField.config) === null || _a === void 0 ? void 0 : _a.multiple);
        let newResource = resVal;
        if (resField) {
            const eResource = droppedEvent[resKey];
            const currentRes = arraytizeFieldVal(resField, eResource, droppedEvent).value;
            if (isMultiple) {
                // if dropped on already owned resource
                if (currentRes.includes(resVal)) {
                    // Omit if dropped on same time slot for multiple event
                    if (isEqual(droppedEvent.start, startTime)) {
                        return;
                    }
                    newResource = currentRes;
                }
                else {
                    // if have multiple resource ? add other : move to other
                    newResource =
                        currentRes.length > 1 ? [...currentRes, resVal] : [resVal];
                }
            }
        }
        // Omit if dropped on same time slot for non multiple events
        if (isEqual(droppedEvent.start, startTime)) {
            if (!newResource ||
                (!isMultiple && newResource === droppedEvent[resKey])) {
                return;
            }
        }
        // Update event time according to original duration & update resources/owners
        const diff = differenceInMinutes(droppedEvent.end, droppedEvent.start);
        const updatedEvent = Object.assign(Object.assign({}, droppedEvent), { start: startTime, end: addMinutes(startTime, diff), [resKey]: newResource || "" });
        // Local
        if (!onEventDrop || typeof onEventDrop !== "function") {
            return confirmEvent(updatedEvent, "edit");
        }
        // Remote
        try {
            triggerLoading(true);
            const _event = yield onEventDrop(startTime, updatedEvent, droppedEvent);
            if (_event) {
                confirmEvent(_event, "edit");
            }
        }
        finally {
            triggerLoading(false);
        }
    });
    return (_jsx(StateContext.Provider, Object.assign({ value: Object.assign(Object.assign({}, state), { handleState,
            getViews,
            triggerDialog,
            triggerLoading,
            handleGotoDay,
            confirmEvent,
            onDrop }) }, { children: children }), void 0));
};
export { AppState };

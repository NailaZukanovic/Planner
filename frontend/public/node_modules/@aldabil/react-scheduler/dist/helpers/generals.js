import { addMinutes, isWithinInterval } from "date-fns";
export const getOneView = (state) => {
    if (state.month) {
        return "month";
    }
    else if (state.week) {
        return "week";
    }
    else if (state.day) {
        return "day";
    }
    throw new Error("No views were selected");
};
export const getAvailableViews = (state) => {
    let views = [];
    if (state.month) {
        views.push("month");
    }
    if (state.week) {
        views.push("week");
    }
    if (state.day) {
        views.push("day");
    }
    return views;
};
export const arraytizeFieldVal = (field, val, event) => {
    var _a;
    const arrytize = ((_a = field.config) === null || _a === void 0 ? void 0 : _a.multiple) &&
        !Array.isArray((event === null || event === void 0 ? void 0 : event[field.name]) || field.default);
    const value = arrytize ? (val ? [val] : []) : val;
    const validity = arrytize ? value.length : value;
    return { value, validity };
};
export const getResourcedEvents = (events, resource, resourceFields, fields) => {
    var _a;
    const keyName = resourceFields.idField;
    const resourceField = fields.find((f) => f.name === keyName);
    const isMultiple = !!((_a = resourceField === null || resourceField === void 0 ? void 0 : resourceField.config) === null || _a === void 0 ? void 0 : _a.multiple);
    let recousedEvents = [];
    for (const event of events) {
        // Handle single select & multiple select accordingly
        const arrytize = isMultiple && !Array.isArray(event[keyName]);
        const eventVal = arrytize ? [event[keyName]] : event[keyName];
        const isThisResource = isMultiple
            ? eventVal.includes(resource[keyName])
            : eventVal === resource[keyName];
        if (isThisResource) {
            recousedEvents.push(Object.assign(Object.assign({}, event), { color: event.color || resource[resourceFields.colorField || ""] }));
        }
    }
    return recousedEvents;
};
export const traversCrossingEvents = (todayEvents, event) => {
    return todayEvents.filter((e) => e.event_id !== event.event_id &&
        (isWithinInterval(addMinutes(event.start, 1), {
            start: e.start,
            end: e.end,
        }) ||
            isWithinInterval(addMinutes(event.end, -1), {
                start: e.start,
                end: e.end,
            }) ||
            isWithinInterval(addMinutes(e.start, 1), {
                start: event.start,
                end: event.end,
            }) ||
            isWithinInterval(addMinutes(e.end, -1), {
                start: event.start,
                end: event.end,
            })));
};
export const calcMinuteHeight = (cellHeight, step) => {
    return Math.ceil(cellHeight) / step;
};
export const calcCellHeight = (tableHeight, hoursLength) => {
    return Math.max(tableHeight / hoursLength, 60);
};

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useCallback, Fragment } from "react";
import { Avatar, Typography, useTheme } from "@mui/material";
import { addDays, eachWeekOfInterval, format, isSameMonth, isToday, setHours, endOfMonth, startOfMonth, } from "date-fns";
import MonthEvents from "../components/events/MonthEvents";
import { useAppState } from "../hooks/useAppState";
import { getResourcedEvents } from "../helpers/generals";
import { WithResources } from "../components/common/WithResources";
import { Cell } from "../components/common/Cell";
import { TableGrid } from "../styles/styles";
const Month = () => {
    const { month, selectedDate, height, events, handleGotoDay, remoteEvents, triggerLoading, handleState, resources, resourceFields, fields, } = useAppState();
    const { weekStartOn, weekDays, startHour, endHour } = month;
    const monthStart = startOfMonth(selectedDate);
    const monthEnd = endOfMonth(selectedDate);
    const eachWeekStart = eachWeekOfInterval({
        start: monthStart,
        end: monthEnd,
    }, { weekStartsOn: weekStartOn });
    const daysList = weekDays.map((d) => addDays(eachWeekStart[0], d));
    const CELL_HEIGHT = height / eachWeekStart.length;
    const theme = useTheme();
    const fetchEvents = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        try {
            triggerLoading(true);
            const start = eachWeekStart[0];
            const end = addDays(eachWeekStart[eachWeekStart.length - 1], daysList.length);
            const query = `?start=${start}&end=${end}`;
            const events = yield remoteEvents(query);
            if (events && (events === null || events === void 0 ? void 0 : events.length)) {
                handleState(events, "events");
            }
        }
        catch (error) {
            throw error;
        }
        finally {
            triggerLoading(false);
        }
        // eslint-disable-next-line
    }), [selectedDate]);
    useEffect(() => {
        if (remoteEvents instanceof Function) {
            fetchEvents();
        }
        // eslint-disable-next-line
    }, [fetchEvents]);
    const renderCells = (resource) => {
        let recousedEvents = events;
        if (resource) {
            recousedEvents = getResourcedEvents(events, resource, resourceFields, fields);
        }
        const rows = [];
        for (const startDay of eachWeekStart) {
            const cells = weekDays.map((d) => {
                const today = addDays(startDay, d);
                const start = new Date(`${format(setHours(today, startHour), "yyyy MM dd hh:mm a")}`);
                const end = new Date(`${format(setHours(today, endHour), "yyyy MM dd hh:mm a")}`);
                const field = resourceFields.idField;
                return (_jsxs("span", Object.assign({ style: { height: CELL_HEIGHT }, className: "rs__cell" }, { children: [_jsx(Cell, { start: start, end: end, resourceKey: field, resourceVal: resource ? resource[field] : null }, void 0),
                        _jsxs(Fragment, { children: [_jsx(Avatar, Object.assign({ style: {
                                        width: 27,
                                        height: 27,
                                        position: "absolute",
                                        top: 0,
                                        background: isToday(today)
                                            ? theme.palette.secondary.main
                                            : "transparent",
                                        color: isToday(today)
                                            ? theme.palette.secondary.contrastText
                                            : "",
                                        marginBottom: 2,
                                    } }, { children: _jsx(Typography, Object.assign({ color: !isSameMonth(today, monthStart) ? "#ccc" : "textPrimary", className: "rs__hover__op", onClick: (e) => {
                                            e.stopPropagation();
                                            handleGotoDay(today);
                                        } }, { children: format(today, "dd") }), void 0) }), void 0),
                                _jsx(MonthEvents, { events: recousedEvents, today: today, eachWeekStart: eachWeekStart, daysList: daysList, onViewMore: handleGotoDay, cellHeight: CELL_HEIGHT }, void 0)] }, void 0)] }), d.toString()));
            });
            rows.push(_jsx(Fragment, { children: cells }, startDay.toString()));
        }
        return rows;
    };
    const renderTable = (resource) => {
        return (_jsxs(TableGrid, Object.assign({ days: daysList.length, indent: "0" }, { children: [daysList.map((date, i) => (_jsx("span", Object.assign({ className: "rs__cell rs__header" }, { children: _jsx(Typography, Object.assign({ align: "center", variant: "body2" }, { children: format(date, "EE") }), void 0) }), i))), renderCells(resource)] }), void 0));
    };
    return resources.length ? (_jsx(WithResources, { renderChildren: renderTable }, void 0)) : (renderTable());
};
export { Month };

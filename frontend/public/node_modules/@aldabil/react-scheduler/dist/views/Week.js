var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useCallback, Fragment } from "react";
import { Typography } from "@mui/material";
import { startOfWeek, addDays, format, eachMinuteOfInterval, isSameDay, differenceInDays, isBefore, isToday, setMinutes, setHours, isWithinInterval, isAfter, endOfDay, startOfDay, addMinutes, } from "date-fns";
import TodayTypo from "../components/common/TodayTypo";
import EventItem from "../components/events/EventItem";
import { useAppState } from "../hooks/useAppState";
import { calcCellHeight, calcMinuteHeight, getResourcedEvents, } from "../helpers/generals";
import { WithResources } from "../components/common/WithResources";
import { Cell } from "../components/common/Cell";
import TodayEvents from "../components/events/TodayEvents";
import { TableGrid } from "../styles/styles";
import { MULTI_DAY_EVENT_HEIGHT } from "../helpers/constants";
const Week = () => {
    const { week, selectedDate, height, events, triggerDialog, handleGotoDay, remoteEvents, triggerLoading, handleState, resources, resourceFields, fields, direction, locale, } = useAppState();
    const { weekStartOn, weekDays, startHour, endHour, step, cellRenderer } = week;
    const _weekStart = startOfWeek(selectedDate, { weekStartsOn: weekStartOn });
    const daysList = weekDays.map((d) => addDays(_weekStart, d));
    const weekStart = startOfDay(daysList[0]);
    const weekEnd = endOfDay(daysList[daysList.length - 1]);
    const START_TIME = setMinutes(setHours(selectedDate, startHour), 0);
    const END_TIME = setMinutes(setHours(selectedDate, endHour), 0);
    const hours = eachMinuteOfInterval({
        start: START_TIME,
        end: END_TIME,
    }, { step: step });
    const CELL_HEIGHT = calcCellHeight(height, hours.length);
    const MINUTE_HEIGHT = calcMinuteHeight(CELL_HEIGHT, step);
    const MULTI_SPACE = MULTI_DAY_EVENT_HEIGHT;
    const fetchEvents = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        try {
            triggerLoading(true);
            const query = `?start=${weekStart}&end=${weekEnd}`;
            const events = yield remoteEvents(query);
            if (Array.isArray(events)) {
                handleState(events, "events");
            }
        }
        catch (error) {
            throw error;
        }
        finally {
            triggerLoading(false);
        }
        // eslint-disable-next-line
    }), [selectedDate]);
    useEffect(() => {
        if (remoteEvents instanceof Function) {
            fetchEvents();
        }
        // eslint-disable-next-line
    }, [fetchEvents]);
    const renderMultiDayEvents = (events, today) => {
        const isFirstDayInWeek = isSameDay(weekStart, today);
        const allWeekMulti = events.filter((e) => differenceInDays(e.end, e.start) > 0 &&
            daysList.some((weekday) => isWithinInterval(weekday, {
                start: startOfDay(e.start),
                end: endOfDay(e.end),
            })));
        const multiDays = allWeekMulti
            .filter((e) => isBefore(e.start, weekStart)
            ? isFirstDayInWeek
            : isSameDay(e.start, today))
            .sort((a, b) => b.end.getTime() - a.end.getTime());
        return multiDays.map((event, i) => {
            const hasPrev = isBefore(startOfDay(event.start), weekStart);
            const hasNext = isAfter(endOfDay(event.end), weekEnd);
            const eventLength = differenceInDays(hasNext ? weekEnd : event.end, hasPrev ? weekStart : event.start) + 1;
            const prevNextEvents = events.filter((e) => isFirstDayInWeek
                ? false
                : e.event_id !== event.event_id && //Exclude it's self
                    isWithinInterval(today, { start: e.start, end: e.end }));
            let index = i;
            if (prevNextEvents.length) {
                index += prevNextEvents.length;
            }
            return (_jsx("div", Object.assign({ className: "rs__multi_day", style: {
                    top: index * MULTI_SPACE + 45,
                    width: `${100 * eventLength}%`,
                } }, { children: _jsx(EventItem, { event: event, hasPrev: hasPrev, hasNext: hasNext, multiday: true }, void 0) }), event.event_id));
        });
    };
    const renderTable = (resource) => {
        let recousedEvents = events;
        if (resource) {
            recousedEvents = getResourcedEvents(events, resource, resourceFields, fields);
        }
        const allWeekMulti = events.filter((e) => differenceInDays(e.end, e.start) > 0 &&
            daysList.some((weekday) => isWithinInterval(weekday, {
                start: startOfDay(e.start),
                end: endOfDay(e.end),
            })));
        // Equalizing multi-day section height
        const headerHeight = MULTI_SPACE * allWeekMulti.length + 45;
        return (_jsxs(TableGrid, Object.assign({ days: daysList.length }, { children: [_jsx("span", { className: "rs__cell" }, void 0),
                daysList.map((date, i) => (_jsxs("span", Object.assign({ className: `rs__cell rs__header ${isToday(date) ? "rs__today_cell" : ""}`, style: { height: headerHeight } }, { children: [_jsx(TodayTypo, { date: date, onClick: handleGotoDay }, void 0), renderMultiDayEvents(recousedEvents, date)] }), i))),
                hours.map((h, i) => (_jsxs(Fragment, { children: [_jsx("span", Object.assign({ style: { height: CELL_HEIGHT }, className: "rs__cell rs__header rs__time" }, { children: _jsx(Typography, Object.assign({ variant: "caption" }, { children: format(h, "hh:mm a", { locale: locale }) }), void 0) }), void 0),
                        daysList.map((date, ii) => {
                            const start = new Date(`${format(date, "yyyy MM dd")} ${format(h, "hh:mm a")}`);
                            const end = new Date(`${format(date, "yyyy MM dd")} ${format(addMinutes(h, step), "hh:mm a")}`);
                            const field = resourceFields.idField;
                            return (_jsxs("span", Object.assign({ className: `rs__cell ${isToday(date) ? "rs__today_cell" : ""}` }, { children: [i === 0 && (_jsx(TodayEvents, { todayEvents: recousedEvents
                                            .filter((e) => isSameDay(date, e.start) &&
                                            !differenceInDays(e.end, e.start))
                                            .sort((a, b) => a.end.getTime() - b.end.getTime()), today: date, minuteHeight: MINUTE_HEIGHT, startHour: startHour, step: step, direction: direction }, void 0)),
                                    cellRenderer ? (cellRenderer({
                                        day: date,
                                        start,
                                        end,
                                        height: CELL_HEIGHT,
                                        onClick: () => triggerDialog(true, {
                                            start,
                                            end,
                                            [field]: resource ? resource[field] : null,
                                        }),
                                        [field]: resource ? resource[field] : null,
                                    })) : (_jsx(Cell, { start: start, end: end, resourceKey: field, resourceVal: resource ? resource[field] : null }, void 0))] }), ii));
                        })] }, i)))] }), void 0));
    };
    return resources.length ? (_jsx(WithResources, { renderChildren: renderTable }, void 0)) : (renderTable());
};
export { Week };

import React, { forwardRef } from 'react';
import useStyles from './SelectDropdown.styles.js';
import { Popper } from '../../Popper/Popper.js';
import { Paper } from '../../Paper/Paper.js';

const SelectDropdown = forwardRef(({
  mounted,
  transition,
  transitionDuration,
  transitionTimingFunction,
  uuid,
  shadow,
  maxDropdownHeight,
  children,
  classNames,
  styles,
  dropdownComponent,
  referenceElement,
  direction = "column",
  onDirectionChange,
  zIndex = 2e3,
  __staticSelector
}, ref) => {
  const { classes } = useStyles(null, { classNames, styles, name: __staticSelector });
  return /* @__PURE__ */ React.createElement(Popper, {
    referenceElement,
    mounted,
    transition,
    transitionDuration,
    transitionTimingFunction,
    position: "bottom",
    placementFallbacks: ["top"],
    zIndex,
    onPlacementChange: (placement) => {
      const nextDirection = placement === "top" ? "column-reverse" : "column";
      if (direction !== nextDirection) {
        onDirectionChange && onDirectionChange(nextDirection);
      }
    },
    modifiers: [
      {
        name: "sameWidth",
        enabled: true,
        phase: "beforeWrite",
        requires: ["computeStyles"],
        fn: ({ state }) => {
          state.styles.popper.width = `${state.rects.reference.width}px`;
        },
        effect: ({ state }) => {
          state.elements.popper.style.width = `${state.elements.reference.offsetWidth}px`;
        }
      }
    ]
  }, /* @__PURE__ */ React.createElement(Paper, {
    component: dropdownComponent || "div",
    id: `${uuid}-items`,
    "aria-labelledby": `${uuid}-label`,
    role: "listbox",
    className: classes.dropdown,
    shadow,
    ref,
    style: {
      maxHeight: maxDropdownHeight,
      flexDirection: direction
    },
    onMouseDown: (event) => event.preventDefault()
  }, children));
});
SelectDropdown.displayName = "@mantine/core/SelectDropdown";

export { SelectDropdown };
//# sourceMappingURL=SelectDropdown.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var RenderList_styles = require('./RenderList.styles.js');
var UnstyledButton = require('../../Button/UnstyledButton/UnstyledButton.js');
var Text = require('../../Text/Text.js');
var TextInput = require('../../TextInput/TextInput.js');
var ActionIcon = require('../../ActionIcon/ActionIcon.js');
var PrevIcon = require('../../Pagination/icons/PrevIcon.js');
var NextIcon = require('../../Pagination/icons/NextIcon.js');
var FirstIcon = require('../../Pagination/icons/FirstIcon.js');
var LastIcon = require('../../Pagination/icons/LastIcon.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function RenderList({
  className,
  data,
  onSelect,
  selection,
  itemComponent: ItemComponent,
  listComponent,
  searchPlaceholder,
  filter,
  nothingFound,
  title,
  reversed,
  onMoveAll,
  onMove,
  height,
  classNames,
  styles
}) {
  const { classes, cx } = RenderList_styles['default']({ reversed, height }, { name: "TransferList", classNames, styles });
  const [query, setQuery] = React.useState("");
  const [hovered, setHovered] = React.useState(-1);
  const filteredData = data.filter((item) => filter(query, item));
  const ListComponent = listComponent || "div";
  const items = filteredData.map((item, index) => /* @__PURE__ */ React__default.createElement(UnstyledButton.UnstyledButton, {
    tabIndex: -1,
    onClick: () => onSelect(item.value),
    key: item.value,
    onMouseEnter: () => setHovered(index),
    className: cx(classes.transferListItem, {
      [classes.transferListItemHovered]: index === hovered
    })
  }, /* @__PURE__ */ React__default.createElement(ItemComponent, {
    data: item,
    selected: selection.includes(item.value)
  })));
  const handleSearchKeydown = (event) => {
    switch (event.code) {
      case "Enter": {
        if (filteredData[hovered]) {
          event.preventDefault();
          onSelect(filteredData[hovered].value);
        }
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        setHovered((current) => current < filteredData.length - 1 ? current + 1 : current);
        break;
      }
      case "ArrowUp": {
        event.preventDefault();
        setHovered((current) => current > 0 ? current - 1 : current);
      }
    }
  };
  return /* @__PURE__ */ React__default.createElement("div", {
    className: cx(classes.transferList, className)
  }, title && /* @__PURE__ */ React__default.createElement(Text.Text, {
    weight: 500,
    className: classes.transferListTitle
  }, title), /* @__PURE__ */ React__default.createElement("div", {
    className: classes.transferListBody
  }, /* @__PURE__ */ React__default.createElement("div", {
    className: classes.transferListHeader
  }, /* @__PURE__ */ React__default.createElement(TextInput.TextInput, {
    value: query,
    onChange: (event) => {
      setQuery(event.currentTarget.value);
      setHovered(0);
    },
    onFocus: () => setHovered(0),
    onBlur: () => setHovered(-1),
    placeholder: searchPlaceholder,
    radius: 0,
    onKeyDown: handleSearchKeydown,
    sx: { flex: 1 },
    classNames: { input: classes.transferListSearch }
  }), /* @__PURE__ */ React__default.createElement(ActionIcon.ActionIcon, {
    variant: "default",
    size: 36,
    radius: 0,
    className: classes.transferListControl,
    disabled: selection.length === 0,
    onClick: onMove
  }, reversed ? /* @__PURE__ */ React__default.createElement(PrevIcon.PrevIcon, null) : /* @__PURE__ */ React__default.createElement(NextIcon.NextIcon, null)), /* @__PURE__ */ React__default.createElement(ActionIcon.ActionIcon, {
    variant: "default",
    size: 36,
    radius: 0,
    className: classes.transferListControl,
    disabled: data.length === 0,
    onClick: onMoveAll
  }, reversed ? /* @__PURE__ */ React__default.createElement(FirstIcon.FirstIcon, null) : /* @__PURE__ */ React__default.createElement(LastIcon.LastIcon, null))), /* @__PURE__ */ React__default.createElement(ListComponent, {
    className: classes.transferListItems,
    onMouseLeave: () => setHovered(-1)
  }, items.length > 0 ? items : /* @__PURE__ */ React__default.createElement(Text.Text, {
    color: "dimmed",
    size: "sm",
    align: "center",
    mt: "sm"
  }, nothingFound))));
}
RenderList.displayName = "@mantine/core/RenderList";

exports.RenderList = RenderList;
//# sourceMappingURL=RenderList.js.map
